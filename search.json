[{"path":"https://tsibble.tidyverts.org/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (http://contributor-covenant.org), version 1.0.0, available http://contributor-covenant.org/version/1/0/0/","code":""},{"path":"https://tsibble.tidyverts.org/CONTRIBUTING.html","id":null,"dir":"","previous_headings":"","what":"Contributing to tsibble","title":"Contributing to tsibble","text":"outlines propose change tsibble. detailed info contributing , tidyverse packages, please see development contributing guide.","code":""},{"path":"https://tsibble.tidyverts.org/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to tsibble","text":"Small typos grammatical errors documentation may edited directly using GitHub web interface, long changes made source file. YES: edit roxygen comment .R file R/. : edit .Rd file man/.","code":""},{"path":"https://tsibble.tidyverts.org/CONTRIBUTING.html","id":"prerequisites","dir":"","previous_headings":"","what":"Prerequisites","title":"Contributing to tsibble","text":"make substantial pull request, always file issue make sure someone team agrees ’s problem. ’ve found bug, create associated issue illustrate bug minimal reprex.","code":""},{"path":"https://tsibble.tidyverts.org/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"","what":"Pull request process","title":"Contributing to tsibble","text":"recommend create Git branch pull request (PR). Look Travis AppVeyor build status making changes. README contain badges continuous integration services used package. New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat. Contributions test cases included easier accept. user-facing changes, add bullet top NEWS.md current development version header describing changes made followed GitHub username, links relevant issue(s)/PR(s).","code":""},{"path":"https://tsibble.tidyverts.org/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to tsibble","text":"Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://tsibble.tidyverts.org/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) 2018 Earo Wang  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. tsibble Copyright (C) 2018 Earo Wang This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://tsibble.tidyverts.org/SUPPORT.html","id":null,"dir":"","previous_headings":"","what":"Getting help with tsibble","title":"Getting help with tsibble","text":"Thanks using tsibble. filing issue, places explore pieces put together make process smooth possible. Start making minimal reproducible example using reprex package. haven’t heard used reprex , ’re treat! Seriously, reprex make R-question-asking endeavors easier (pretty insane ROI five ten minutes ’ll take learn ’s ). additional reprex pointers, check Get help! section tidyverse site. Armed reprex, next step figure ask. ’s question: start community.rstudio.com, /StackOverflow. people answer questions. ’s bug: ’re right place, file issue. ’re sure: let community help figure ! problem bug feature request, can easily return report . opening new issue, sure search issues pull requests make sure bug hasn’t reported /already fixed development version. default, search pre-populated :issue :open. can edit qualifiers (e.g. :pr, :closed) needed. example, ’d simply remove :open search issues repo, open closed. right place, need file issue, please review “File issues” paragraph tidyverse contributing guidelines. Thanks help!","code":""},{"path":"https://tsibble.tidyverts.org/articles/intro-tsibble.html","id":"contextual-semantics-index-and-key","dir":"Articles","previous_headings":"","what":"Contextual semantics: index and key","title":"Introduction to tsibble","text":"tsibble() creates tsibble object, as_tsibble() S3 method coerce objects tsibble. object vector/matrix underlies, ts mts, can automated tsibble using as_tsibble() without specification. tibble data frame, as_tsibble() requires little setup order declare index key variables. weather data included package nycflights13 contains hourly meteorological records (temperature, humid precipitation) year 2013 three stations (.e. JFK, LGA EWR) New York City. Since time_hour column involving timestamps, as_tsibble() defaults index variable; alternatively, index can specified argument index = time_hour disable verbose message. Except index, tsibble requires “key”, defines subjects individuals measured time. example, origin variable identifier, passed argument key as_tsibble(). observation uniquely identified index key valid tsibble. Others—temp, humid precip—referred measured variables. creating tsibble, key sorted first, followed arranging time past recent. interval automatically obtained based corresponding time representation: integer/numeric/ordered: either “unit” “year” (Y) yearquarter/yearqtr: “quarter” (Q) yearmonth/yearmon: “month” (M) yearweek: “week” (W) Date: “day” (D) difftime: “week” (W), “day” (D), “hour” (h), “minute” (m), “second” (s) POSIXct/hms: “hour” (h), “minute” (m), “second” (s), “millisecond” (us), “microsecond” (ms) nanotime: “nanosecond” (ns) , tsibble monthly intervals expects yearmonth/yearmon class index column. Neither Date POSIXct gives monthly tsibble. print display data-centric contextually informative, data dimension, time interval, number time-based units. displays weather_tsbl one-hour interval ([1h]) origin [3] key along three time series table.","code":"library(dplyr) library(lubridate) library(tsibble) weather <- nycflights13::weather %>%    select(origin, time_hour, temp, humid, precip) weather #> # A tibble: 26,115 × 5 #>   origin time_hour            temp humid precip #>   <chr>  <dttm>              <dbl> <dbl>  <dbl> #> 1 EWR    2013-01-01 01:00:00  39.0  59.4      0 #> 2 EWR    2013-01-01 02:00:00  39.0  61.6      0 #> 3 EWR    2013-01-01 03:00:00  39.0  64.4      0 #> 4 EWR    2013-01-01 04:00:00  39.9  62.2      0 #> 5 EWR    2013-01-01 05:00:00  39.0  64.4      0 #> # ℹ 26,110 more rows weather_tsbl <- as_tsibble(weather, key = origin) #> Using `time_hour` as index variable. weather_tsbl #> # A tsibble: 26,115 x 5 [1h] <America/New_York> #> # Key:       origin [3] #>   origin time_hour            temp humid precip #>   <chr>  <dttm>              <dbl> <dbl>  <dbl> #> 1 EWR    2013-01-01 01:00:00  39.0  59.4      0 #> 2 EWR    2013-01-01 02:00:00  39.0  61.6      0 #> 3 EWR    2013-01-01 03:00:00  39.0  64.4      0 #> 4 EWR    2013-01-01 04:00:00  39.9  62.2      0 #> 5 EWR    2013-01-01 05:00:00  39.0  64.4      0 #> # ℹ 26,110 more rows"},{"path":"https://tsibble.tidyverts.org/articles/intro-tsibble.html","id":"data-pipeline","dir":"Articles","previous_headings":"","what":"Data pipeline","title":"Introduction to tsibble","text":"tidy data representation naturally supports thinking operations data building blocks, forming part “data pipeline” time-based context. Users familiar tidyverse find easier perform common temporal analysis tasks. example, index_by() counterpart group_by() temporal context, groups time index. index_by() + summarise() used summarise daily highs lows station. result, index updated date one-day interval index time_hour; two new variables created computed daily maximum minimum temperatures.","code":"weather_tsbl %>%   group_by_key() %>%   index_by(date = ~ as_date(.)) %>%    summarise(     temp_high = max(temp, na.rm = TRUE),     temp_low = min(temp, na.rm = TRUE)   ) #> # A tsibble: 1,092 x 4 [1D] #> # Key:       origin [3] #>   origin date       temp_high temp_low #>   <chr>  <date>         <dbl>    <dbl> #> 1 EWR    2013-01-01      41       28.0 #> 2 EWR    2013-01-02      34.0     24.1 #> 3 EWR    2013-01-03      34.0     26.1 #> 4 EWR    2013-01-04      39.9     28.9 #> 5 EWR    2013-01-05      44.1     32   #> # ℹ 1,087 more rows"},{"path":"https://tsibble.tidyverts.org/articles/intro-tsibble.html","id":"irregular-time-interval","dir":"Articles","previous_headings":"","what":"Irregular time interval","title":"Introduction to tsibble","text":"Note tsibble handles regularly-spaced temporal data well, seconds years based time representation (see ?tsibble). option regular, default, set TRUE as_tsibble(). Specify regular FALSE create tsibble data collected irregular time interval. shows scheduled date time flights New York: key contains columns carrier flight identify observational units time, passenger’s point view. regular = FALSE, turns irregularly-spaced tsibble, [!] highlights irregularity. regularise irregular tsibble, can achieved index_by() + summarise().","code":"flights <- nycflights13::flights %>%   mutate(sched_dep_datetime =      make_datetime(year, month, day, hour, minute, tz = \"America/New_York\")) flights_tsbl <- flights %>%   as_tsibble(     key = c(carrier, flight),      index = sched_dep_datetime,      regular = FALSE   ) flights_tsbl #> # A tsibble: 336,776 x 20 [!] <America/New_York> #> # Key:       carrier, flight [5,725] #>    year month   day dep_time sched_dep_time dep_delay arr_time sched_arr_time #>   <int> <int> <int>    <int>          <int>     <dbl>    <int>          <int> #> 1  2013    11     3     1531           1540        -9     1653           1725 #> 2  2013    11     4     1539           1540        -1     1712           1725 #> 3  2013    11     5     1548           1540         8     1708           1725 #> 4  2013    11     6     1535           1540        -5     1657           1725 #> 5  2013    11     7     1549           1540         9     1733           1725 #> # ℹ 336,771 more rows #> # ℹ 12 more variables: arr_delay <dbl>, carrier <chr>, flight <int>, #> #   tailnum <chr>, origin <chr>, dest <chr>, air_time <dbl>, distance <dbl>, #> #   hour <dbl>, minute <dbl>, time_hour <dttm>, sched_dep_datetime <dttm>"},{"path":"https://tsibble.tidyverts.org/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Earo Wang. Author, maintainer. Di Cook. Author, thesis advisor. Rob Hyndman. Author, thesis advisor. Mitchell O'Hara-Wild. Author. Tyler Smith. Contributor. Wil Davis. Contributor.","code":""},{"path":"https://tsibble.tidyverts.org/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Wang, E, D Cook, RJ Hyndman (2020). new tidy data structure support exploration modeling temporal data, Journal Computational Graphical Statistics, 29:3, 466-478, doi:10.1080/10618600.2019.1695624.","code":"@Article{,   author = {Earo Wang and Dianne Cook and Rob J Hyndman},   title = {A new tidy data structure to support exploration and modeling of temporal data},   journal = {Journal of Computational and Graphical Statistics},   volume = {29},   number = {3},   pages = {466-478},   year = {2020},   publisher = {Taylor & Francis},   doi = {10.1080/10618600.2019.1695624},   url = {https://doi.org/10.1080/10618600.2019.1695624}, }"},{"path":"https://tsibble.tidyverts.org/index.html","id":"tsibble-","dir":"","previous_headings":"","what":"Tidy Temporal Data Frames and Tools","title":"Tidy Temporal Data Frames and Tools","text":"tsibble package provides data infrastructure tidy temporal data wrangling tools. Adapting tidy data principles, tsibble data- model-oriented object. tsibble: Index variable inherent ordering past present. Key set variables define observational units time. observation uniquely identified index key. observational unit measured common interval, regularly spaced.","code":""},{"path":"https://tsibble.tidyverts.org/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Tidy Temporal Data Frames and Tools","text":"install stable version CRAN: install development version Github using","code":"install.packages(\"tsibble\") # install.packages(\"remotes\") remotes::install_github(\"tidyverts/tsibble\")"},{"path":[]},{"path":"https://tsibble.tidyverts.org/index.html","id":"coerce-to-a-tsibble-with-as_tsibble","dir":"","previous_headings":"Get started","what":"Coerce to a tsibble with as_tsibble()","title":"Tidy Temporal Data Frames and Tools","text":"coerce data frame tsibble, need declare key index. example, weather data package nycflights13, time_hour containing date-times declared index, origin key. columns can considered measured variables. key can comprised empty, one, variables. See package?tsibble vignette(\"intro-tsibble\") details. interval computed index based representation, ranging year nanosecond, numerics ordered factors. table shows tsibble interprets common time formats. full list index classes supported tsibble can found package?tsibble.","code":"library(dplyr) library(tsibble) weather <- nycflights13::weather %>%    select(origin, time_hour, temp, humid, precip) weather_tsbl <- as_tsibble(weather, key = origin, index = time_hour) weather_tsbl #> # A tsibble: 26,115 x 5 [1h] <America/New_York> #> # Key:       origin [3] #>   origin time_hour            temp humid precip #>   <chr>  <dttm>              <dbl> <dbl>  <dbl> #> 1 EWR    2013-01-01 01:00:00  39.0  59.4      0 #> 2 EWR    2013-01-01 02:00:00  39.0  61.6      0 #> 3 EWR    2013-01-01 03:00:00  39.0  64.4      0 #> 4 EWR    2013-01-01 04:00:00  39.9  62.2      0 #> 5 EWR    2013-01-01 05:00:00  39.0  64.4      0 #> # ℹ 26,110 more rows"},{"path":"https://tsibble.tidyverts.org/index.html","id":"fill_gaps-to-turn-implicit-missing-values-into-explicit-missing-values","dir":"","previous_headings":"Get started","what":"fill_gaps() to turn implicit missing values into explicit missing values","title":"Tidy Temporal Data Frames and Tools","text":"Often implicit missing cases time series. observations made regular time interval, turn implicit missingness explicit simply using fill_gaps(), filling gaps precipitation (precip) 0 meanwhile. quite common replaces NAs previous observation origin time series analysis, easily done using fill() tidyr. fill_gaps() also handles filling time gaps values functions, respects time zones date-times. Wanna quick overview implicit missing values? Check vignette(\"implicit-na\").","code":"full_weather <- weather_tsbl %>%   fill_gaps(precip = 0) %>%    group_by_key() %>%    tidyr::fill(temp, humid, .direction = \"down\") full_weather #> # A tsibble: 26,190 x 5 [1h] <America/New_York> #> # Key:       origin [3] #> # Groups:    origin [3] #>   origin time_hour            temp humid precip #>   <chr>  <dttm>              <dbl> <dbl>  <dbl> #> 1 EWR    2013-01-01 01:00:00  39.0  59.4      0 #> 2 EWR    2013-01-01 02:00:00  39.0  61.6      0 #> 3 EWR    2013-01-01 03:00:00  39.0  64.4      0 #> 4 EWR    2013-01-01 04:00:00  39.9  62.2      0 #> 5 EWR    2013-01-01 05:00:00  39.0  64.4      0 #> # ℹ 26,185 more rows"},{"path":"https://tsibble.tidyverts.org/index.html","id":"index_by--summarise-to-aggregate-over-calendar-periods","dir":"","previous_headings":"Get started","what":"index_by() + summarise() to aggregate over calendar periods","title":"Tidy Temporal Data Frames and Tools","text":"index_by() counterpart group_by() temporal context, groups index . conjunction index_by(), summarise() aggregates interested variables time periods. index_by() goes hand hand index functions including .Date(), yearweek(), yearmonth(), yearquarter(), well friends lubridate. example, interest computing average temperature total precipitation per month, applying yearmonth() index variable (referred .). collapsing rows (like summarise()), group_by() index_by() take care updating key index respectively. index_by() + summarise() combo can help regularising tsibble irregular time space .","code":"full_weather %>%   group_by_key() %>%   index_by(year_month = ~ yearmonth(.)) %>% # monthly aggregates   summarise(     avg_temp = mean(temp, na.rm = TRUE),     ttl_precip = sum(precip, na.rm = TRUE)   ) #> # A tsibble: 36 x 4 [1M] #> # Key:       origin [3] #>   origin year_month avg_temp ttl_precip #>   <chr>       <mth>    <dbl>      <dbl> #> 1 EWR      2013 Jan     35.6       3.53 #> 2 EWR      2013 Feb     34.2       3.83 #> 3 EWR      2013 Mar     40.1       3    #> 4 EWR      2013 Apr     53.0       1.47 #> 5 EWR      2013 May     63.3       5.44 #> # ℹ 31 more rows"},{"path":"https://tsibble.tidyverts.org/index.html","id":"learn-more-about-tsibble","dir":"","previous_headings":"","what":"Learn more about tsibble","title":"Tidy Temporal Data Frames and Tools","text":"ecosystem, tidyverts, built around tsibble object tidy time series analysis. tsibbledata package curates range tsibble data examples poke around tsibble object. feasts package provides support visualising data extracting time series features. fable package provides common forecasting methods tsibble, ARIMA ETS. fabletools package, fable built upon, lays modelling infrastructure ease programming tsibble. Please note project released Contributor Code Conduct. participating project agree abide terms.","code":""},{"path":"https://tsibble.tidyverts.org/reference/as-tibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Coerce to a tibble or data frame — as_tibble.tbl_ts","title":"Coerce to a tibble or data frame — as_tibble.tbl_ts","text":"Coerce tibble data frame","code":""},{"path":"https://tsibble.tidyverts.org/reference/as-tibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a tibble or data frame — as_tibble.tbl_ts","text":"","code":"# S3 method for tbl_ts as_tibble(x, ...)"},{"path":"https://tsibble.tidyverts.org/reference/as-tibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a tibble or data frame — as_tibble.tbl_ts","text":"x tbl_ts. ... Ignored.","code":""},{"path":"https://tsibble.tidyverts.org/reference/as-tibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a tibble or data frame — as_tibble.tbl_ts","text":"","code":"as_tibble(pedestrian) #> # A tibble: 66,037 × 5 #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630 #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826 #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567 #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 #> # ℹ 66,027 more rows"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/as-tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce to a tsibble object — as_tsibble","text":"","code":"as_tsibble(   x,   key = NULL,   index,   regular = TRUE,   validate = TRUE,   .drop = TRUE,   ... )  # S3 method for ts as_tsibble(x, ..., tz = \"UTC\")  # S3 method for mts as_tsibble(x, ..., tz = \"UTC\", pivot_longer = TRUE)"},{"path":"https://tsibble.tidyverts.org/reference/as-tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce to a tsibble object — as_tsibble","text":"x objects coerced tsibble (tbl_ts). key Variable(s) uniquely determine time indices. NULL empty key, c() multiple variables. works tidy selector (e.g. dplyr::starts_with()). index variable specify time index variable. regular Regular time interval (TRUE) irregular (FALSE). interval determined greatest common divisor index column, TRUE. validate TRUE suggests verify key combination key variables leads unique time indices (.e. valid tsibble). sure valid input, specify FALSE skip checks. .drop TRUE, empty key groups dropped. ... arguments passed individual methods. tz Time zone. May useful ts object frequent daily. pivot_longer TRUE gives \"longer\" form data, otherwise .","code":""},{"path":"https://tsibble.tidyverts.org/reference/as-tsibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce to a tsibble object — as_tsibble","text":"tsibble object.","code":""},{"path":"https://tsibble.tidyverts.org/reference/as-tsibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Coerce to a tsibble object — as_tsibble","text":"tsibble sorted key first index.","code":""},{"path":"https://tsibble.tidyverts.org/reference/as-tsibble.html","id":"index","dir":"Reference","previous_headings":"","what":"Index","title":"Coerce to a tsibble object — as_tsibble","text":"extensive range indices supported tsibble: native time classes R (Date, POSIXct, difftime) tsibble's new additions (yearweek, yearmonth, yearquarter). commonly-used classes: ordered, hms::hms, lubridate::period, nanotime::nanotime. tbl_ts regular interval, choice index representation made. example, monthly data correspond time index created yearmonth, instead Date POSIXct. months year ensures regularity, 12 months every year. However, using Date, month containing days ranges 28 31 days, results irregular time space. also applicable year-week year-quarter. Tsibble supports arbitrary index classes, long can ordered past future. support custom class, need define index_valid() class calculate interval interval_pull().","code":""},{"path":"https://tsibble.tidyverts.org/reference/as-tsibble.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Coerce to a tsibble object — as_tsibble","text":"Key variable(s) together index uniquely identifies record: Empty: implicit variable. NULL resulting univariate time series. single variable: example, data(pedestrian) uses Sensor key. Multiple variables: example, Declare key = c(Region, State, Purpose) data(tourism). Key can created conjunction tidy selectors like starts_with().","code":""},{"path":"https://tsibble.tidyverts.org/reference/as-tsibble.html","id":"interval","dir":"Reference","previous_headings":"","what":"Interval","title":"Coerce to a tsibble object — as_tsibble","text":"interval function returns interval associated tsibble. Regular: value time unit including \"nanosecond\", \"microsecond\", \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\". unrecognisable time interval labelled \"unit\". Irregular: as_tsibble(regular = FALSE) gives irregular tsibble. marked !. Unknown: determined (?), empty tsibble, one entry key variable. interval obtained based corresponding index representation: integerish numerics 1582 2499: \"year\" (Y). Note year 1582 saw beginning Gregorian Calendar switch. yearquarter: \"quarter\" (Q) yearmonth: \"month\" (M) yearweek: \"week\" (W) Date: \"day\" (D) difftime: \"week\" (W), \"day\" (D), \"hour\" (h), \"minute\" (m), \"second\" (s) POSIXt/hms: \"hour\" (h), \"minute\" (m), \"second\" (s), \"millisecond\" (us), \"microsecond\" (ms) period: \"year\" (Y), \"month\" (M), \"day\" (D), \"hour\" (h), \"minute\" (m), \"second\" (s), \"millisecond\" (us), \"microsecond\" (ms) nanotime: \"nanosecond\" (ns) numerics &ordered (ordered factor): \"unit\" interval obtained due mismatched index format, error issued. interval invariant subsetting, filter(), slice(), [.tbl_ts. However, result empty tsibble, interval always unknown. joining tsibble data sources aggregating different time scales, interval gets re-calculated.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/as-tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce to a tsibble object — as_tsibble","text":"","code":"# coerce tibble to tsibble w/o a key tbl1 <- tibble(   date = as.Date(\"2017-01-01\") + 0:9,   value = rnorm(10) ) as_tsibble(tbl1) #> Using `date` as index variable. #> # A tsibble: 10 x 2 [1D] #>    date          value #>    <date>        <dbl> #>  1 2017-01-01 -1.40    #>  2 2017-01-02  0.255   #>  3 2017-01-03 -2.44    #>  4 2017-01-04 -0.00557 #>  5 2017-01-05  0.622   #>  6 2017-01-06  1.15    #>  7 2017-01-07 -1.82    #>  8 2017-01-08 -0.247   #>  9 2017-01-09 -0.244   #> 10 2017-01-10 -0.283   # supply the index to suppress the message as_tsibble(tbl1, index = date) #> # A tsibble: 10 x 2 [1D] #>    date          value #>    <date>        <dbl> #>  1 2017-01-01 -1.40    #>  2 2017-01-02  0.255   #>  3 2017-01-03 -2.44    #>  4 2017-01-04 -0.00557 #>  5 2017-01-05  0.622   #>  6 2017-01-06  1.15    #>  7 2017-01-07 -1.82    #>  8 2017-01-08 -0.247   #>  9 2017-01-09 -0.244   #> 10 2017-01-10 -0.283    # coerce tibble to tsibble with a single variable for key # use `yearquarter()` to represent quarterly data tbl2 <- tibble(   qtr = rep(yearquarter(\"2010 Q1\") + 0:9, 3),   group = rep(c(\"x\", \"y\", \"z\"), each = 10),   value = rnorm(30) ) # \"qtr\" is automatically considered as the index var as_tsibble(tbl2, key = group) #> Using `qtr` as index variable. #> # A tsibble: 30 x 3 [1Q] #> # Key:       group [3] #>        qtr group   value #>      <qtr> <chr>   <dbl> #>  1 2010 Q1 x     -0.554  #>  2 2010 Q2 x      0.629  #>  3 2010 Q3 x      2.07   #>  4 2010 Q4 x     -1.63   #>  5 2011 Q1 x      0.512  #>  6 2011 Q2 x     -1.86   #>  7 2011 Q3 x     -0.522  #>  8 2011 Q4 x     -0.0526 #>  9 2012 Q1 x      0.543  #> 10 2012 Q2 x     -0.914  #> # ℹ 20 more rows as_tsibble(tbl2, key = group, index = qtr) #> # A tsibble: 30 x 3 [1Q] #> # Key:       group [3] #>        qtr group   value #>      <qtr> <chr>   <dbl> #>  1 2010 Q1 x     -0.554  #>  2 2010 Q2 x      0.629  #>  3 2010 Q3 x      2.07   #>  4 2010 Q4 x     -1.63   #>  5 2011 Q1 x      0.512  #>  6 2011 Q2 x     -1.86   #>  7 2011 Q3 x     -0.522  #>  8 2011 Q4 x     -0.0526 #>  9 2012 Q1 x      0.543  #> 10 2012 Q2 x     -0.914  #> # ℹ 20 more rows  # create a tsibble with multiple variables for key # use `yearmonth()` to represent monthly data tbl3 <- tibble(   mth = rep(yearmonth(\"2010 Jan\") + 0:8, each = 3),   xyz = rep(c(\"x\", \"y\", \"z\"), each = 9),   abc = rep(letters[1:3], times = 9),   value = rnorm(27) ) as_tsibble(tbl3, key = c(xyz, abc)) #> Using `mth` as index variable. #> # A tsibble: 27 x 4 [1M] #> # Key:       xyz, abc [9] #>         mth xyz   abc     value #>       <mth> <chr> <chr>   <dbl> #>  1 2010 Jan x     a      0.0700 #>  2 2010 Feb x     a     -0.251  #>  3 2010 Mar x     a      0.0465 #>  4 2010 Jan x     b     -0.639  #>  5 2010 Feb x     b      0.445  #>  6 2010 Mar x     b      0.578  #>  7 2010 Jan x     c     -0.0500 #>  8 2010 Feb x     c      2.76   #>  9 2010 Mar x     c      0.118  #> 10 2010 Apr y     a     -1.91   #> # ℹ 17 more rows # coerce ts to tsibble as_tsibble(AirPassengers) #> # A tsibble: 144 x 2 [1M] #>       index value #>       <mth> <dbl> #>  1 1949 Jan   112 #>  2 1949 Feb   118 #>  3 1949 Mar   132 #>  4 1949 Apr   129 #>  5 1949 May   121 #>  6 1949 Jun   135 #>  7 1949 Jul   148 #>  8 1949 Aug   148 #>  9 1949 Sep   136 #> 10 1949 Oct   119 #> # ℹ 134 more rows as_tsibble(sunspot.year) #> # A tsibble: 289 x 2 [1Y] #>    index value #>    <dbl> <dbl> #>  1  1700     5 #>  2  1701    11 #>  3  1702    16 #>  4  1703    23 #>  5  1704    36 #>  6  1705    58 #>  7  1706    29 #>  8  1707    20 #>  9  1708    10 #> 10  1709     8 #> # ℹ 279 more rows as_tsibble(sunspot.month) #> # A tsibble: 3,177 x 2 [1M] #>       index value #>       <mth> <dbl> #>  1 1749 Jan  58   #>  2 1749 Feb  62.6 #>  3 1749 Mar  70   #>  4 1749 Apr  55.7 #>  5 1749 May  85   #>  6 1749 Jun  83.5 #>  7 1749 Jul  94.8 #>  8 1749 Aug  66.3 #>  9 1749 Sep  75.9 #> 10 1749 Oct  75.5 #> # ℹ 3,167 more rows as_tsibble(austres) #> # A tsibble: 89 x 2 [1Q] #>      index  value #>      <qtr>  <dbl> #>  1 1971 Q2 13067. #>  2 1971 Q3 13130. #>  3 1971 Q4 13198. #>  4 1972 Q1 13254. #>  5 1972 Q2 13304. #>  6 1972 Q3 13354. #>  7 1972 Q4 13409. #>  8 1973 Q1 13459. #>  9 1973 Q2 13504. #> 10 1973 Q3 13553. #> # ℹ 79 more rows # coerce mts to tsibble z <- ts(matrix(rnorm(300), 100, 3), start = c(1961, 1), frequency = 12) as_tsibble(z) #> # A tsibble: 300 x 3 [1M] #> # Key:       key [3] #>       index key       value #>       <mth> <chr>     <dbl> #>  1 1961 Jan Series 1  0.132 #>  2 1961 Feb Series 1  0.489 #>  3 1961 Mar Series 1 -1.70  #>  4 1961 Apr Series 1 -1.47  #>  5 1961 May Series 1  0.284 #>  6 1961 Jun Series 1  1.34  #>  7 1961 Jul Series 1  0.237 #>  8 1961 Aug Series 1  1.32  #>  9 1961 Sep Series 1  0.524 #> 10 1961 Oct Series 1  0.607 #> # ℹ 290 more rows as_tsibble(z, pivot_longer = FALSE) #> # A tsibble: 100 x 4 [1M] #>       index `Series 1` `Series 2` `Series 3` #>       <mth>      <dbl>      <dbl>      <dbl> #>  1 1961 Jan      0.132      0.364   -0.968   #>  2 1961 Feb      0.489     -0.286   -0.103   #>  3 1961 Mar     -1.70       0.518    0.240   #>  4 1961 Apr     -1.47      -0.103    0.0609  #>  5 1961 May      0.284     -0.974   -2.18    #>  6 1961 Jun      1.34       1.27    -0.118   #>  7 1961 Jul      0.237      0.961    0.112   #>  8 1961 Aug      1.32       0.769    0.00789 #>  9 1961 Sep      0.524      1.04     1.88    #> 10 1961 Oct      0.607     -0.474    2.16    #> # ℹ 90 more rows"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/as.ts.tbl_ts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Coerce a tsibble to a time series — as.ts.tbl_ts","text":"","code":"# S3 method for tbl_ts as.ts(x, value, frequency = NULL, fill = NA_real_, ...)"},{"path":"https://tsibble.tidyverts.org/reference/as.ts.tbl_ts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Coerce a tsibble to a time series — as.ts.tbl_ts","text":"x tbl_ts object. value measured variable interest spread columns, multiple measures. frequency smart frequency default NULL. set, preferred frequency passed ts(). fill value replace missing values. ... Ignored function.","code":""},{"path":"https://tsibble.tidyverts.org/reference/as.ts.tbl_ts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Coerce a tsibble to a time series — as.ts.tbl_ts","text":"ts object.","code":""},{"path":"https://tsibble.tidyverts.org/reference/as.ts.tbl_ts.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Coerce a tsibble to a time series — as.ts.tbl_ts","text":"","code":"# a monthly series x1 <- as_tsibble(AirPassengers) as.ts(x1) #>      Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec #> 1949 112 118 132 129 121 135 148 148 136 119 104 118 #> 1950 115 126 141 135 125 149 170 170 158 133 114 140 #> 1951 145 150 178 163 172 178 199 199 184 162 146 166 #> 1952 171 180 193 181 183 218 230 242 209 191 172 194 #> 1953 196 196 236 235 229 243 264 272 237 211 180 201 #> 1954 204 188 235 227 234 264 302 293 259 229 203 229 #> 1955 242 233 267 269 270 315 364 347 312 274 237 278 #> 1956 284 277 317 313 318 374 413 405 355 306 271 306 #> 1957 315 301 356 348 355 422 465 467 404 347 305 336 #> 1958 340 318 362 348 363 435 491 505 404 359 310 337 #> 1959 360 342 406 396 420 472 548 559 463 407 362 405 #> 1960 417 391 419 461 472 535 622 606 508 461 390 432"},{"path":"https://tsibble.tidyverts.org/reference/build_tsibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Low-level constructor for a tsibble object — build_tsibble","title":"Low-level constructor for a tsibble object — build_tsibble","text":"build_tsibble() creates tbl_ts object controls. useful creating tbl_ts internally inside function, allows developers determine time needs ordering interval needs calculating.","code":""},{"path":"https://tsibble.tidyverts.org/reference/build_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low-level constructor for a tsibble object — build_tsibble","text":"","code":"build_tsibble(   x,   key = NULL,   key_data = NULL,   index,   index2 = index,   ordered = NULL,   interval = TRUE,   validate = TRUE,   .drop = key_drop_default(x) )"},{"path":"https://tsibble.tidyverts.org/reference/build_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low-level constructor for a tsibble object — build_tsibble","text":"x data.frame, tbl_df, tbl_ts, tabular objects. key Variable(s) uniquely determine time indices. NULL empty key, c() multiple variables. works tidy selector (e.g. dplyr::starts_with()). key_data data frame containing key variables .rows. data frame supplied, argument key ignored. index variable specify time index variable. index2 candidate index update index new one index_by. default, identical index. ordered default NULL arranges key variable(s) first index past future. TRUE suggests skip ordering x correct order. FALSE checks ordering may give warning. interval TRUE automatically calculates interval, FALSE irregular interval. Use specified interval via new_interval() . validate TRUE suggests verify key combination key variables leads unique time indices (.e. valid tsibble). sure valid input, specify FALSE skip checks. .drop TRUE, empty key groups dropped.","code":""},{"path":"https://tsibble.tidyverts.org/reference/build_tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Low-level constructor for a tsibble object — build_tsibble","text":"","code":"# Prepare `pedestrian` to use a new index `Date` ---- pedestrian %>%   build_tsibble(     key = !!key_vars(.), index = !!index(.), index2 = Date,     interval = interval(.)   ) #> # A tsibble: 66,037 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #> # Groups:    @ Date [731] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630 #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826 #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567 #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 #> # ℹ 66,027 more rows"},{"path":"https://tsibble.tidyverts.org/reference/build_tsibble_meta.html","id":null,"dir":"Reference","previous_headings":"","what":"Low-level & high-performance constructor for a tsibble object — build_tsibble_meta","title":"Low-level & high-performance constructor for a tsibble object — build_tsibble_meta","text":"build_tsibble_meta() much less checks build_tsibble() high performance.","code":""},{"path":"https://tsibble.tidyverts.org/reference/build_tsibble_meta.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Low-level & high-performance constructor for a tsibble object — build_tsibble_meta","text":"","code":"build_tsibble_meta(   x,   key_data = NULL,   index,   index2,   ordered = NULL,   interval = NULL )"},{"path":"https://tsibble.tidyverts.org/reference/build_tsibble_meta.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Low-level & high-performance constructor for a tsibble object — build_tsibble_meta","text":"x data.frame, tbl_df, tbl_ts, tabular objects. key_data data frame containing key variables .rows. data frame supplied, argument key ignored. index, index2 Quoted variable name. ordered TRUE suggests skip ordering x correct order. FALSE checks ordering may give warning. interval TRUE automatically calculates interval, FALSE irregular interval. Use specified interval via new_interval() .","code":""},{"path":"https://tsibble.tidyverts.org/reference/count_gaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Count implicit gaps — count_gaps","title":"Count implicit gaps — count_gaps","text":"Count implicit gaps","code":""},{"path":"https://tsibble.tidyverts.org/reference/count_gaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Count implicit gaps — count_gaps","text":"","code":"count_gaps(   .data,   .full = FALSE,   .name = c(\".from\", \".to\", \".n\"),   .start = NULL,   .end = NULL )"},{"path":"https://tsibble.tidyverts.org/reference/count_gaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Count implicit gaps — count_gaps","text":".data tsibble. .full FALSE inserts NA keyed unit within period. TRUE fills NA entire time span data (.k.. fully balanced panel). start() pad NA starting point (.e. min(<index>)) across units. end() pad NA ending point (.e. max(<index>)) across units. .name Strings name new columns. .start, .end Set custom starting/ending time allows expand existing time spans.","code":""},{"path":"https://tsibble.tidyverts.org/reference/count_gaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Count implicit gaps — count_gaps","text":"tibble contains: \"key\" tbl_ts \".\": starting time point gap \".\": ending time point gap \".n\": number implicit missing observations time period","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/count_gaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Count implicit gaps — count_gaps","text":"","code":"ped_gaps <- pedestrian %>%   count_gaps(.full = TRUE) ped_gaps #> # A tibble: 19 × 4 #>    Sensor                        .from               .to                    .n #>    <chr>                         <dttm>              <dttm>              <int> #>  1 Birrarung Marr                2015-04-05 02:00:00 2015-04-05 02:00:00     1 #>  2 Birrarung Marr                2015-05-07 00:00:00 2015-05-31 23:00:00   600 #>  3 Birrarung Marr                2015-10-06 00:00:00 2015-10-31 23:00:00   624 #>  4 Birrarung Marr                2015-11-05 00:00:00 2015-11-06 23:00:00    48 #>  5 Birrarung Marr                2015-11-20 00:00:00 2015-11-24 23:00:00   120 #>  6 Birrarung Marr                2015-11-26 00:00:00 2015-12-04 23:00:00   216 #>  7 Birrarung Marr                2016-04-03 02:00:00 2016-04-03 02:00:00     1 #>  8 Birrarung Marr                2016-04-08 00:00:00 2016-05-03 23:00:00   624 #>  9 Birrarung Marr                2016-10-29 00:00:00 2016-11-28 23:00:00   744 #> 10 Bourke Street Mall (North)    2015-01-01 00:00:00 2015-02-16 23:00:00  1128 #> 11 Bourke Street Mall (North)    2015-04-05 02:00:00 2015-04-05 02:00:00     1 #> 12 Bourke Street Mall (North)    2016-04-03 02:00:00 2016-04-03 02:00:00     1 #> 13 QV Market-Elizabeth St (West) 2015-04-05 02:00:00 2015-04-05 02:00:00     1 #> 14 QV Market-Elizabeth St (West) 2015-12-31 00:00:00 2015-12-31 23:00:00    24 #> 15 QV Market-Elizabeth St (West) 2016-04-03 02:00:00 2016-04-03 02:00:00     1 #> 16 Southern Cross Station        2015-04-05 02:00:00 2015-04-05 02:00:00     1 #> 17 Southern Cross Station        2016-03-08 02:00:00 2016-03-08 02:00:00     1 #> 18 Southern Cross Station        2016-03-29 02:00:00 2016-03-29 03:00:00     2 #> 19 Southern Cross Station        2016-04-03 02:00:00 2016-04-03 02:00:00     1 if (!requireNamespace(\"ggplot2\", quietly = TRUE)) {   stop(\"Please install the ggplot2 package to run these following examples.\") } library(ggplot2) ggplot(ped_gaps, aes(x = Sensor, colour = Sensor)) +   geom_linerange(aes(ymin = .from, ymax = .to)) +   geom_point(aes(y = .from)) +   geom_point(aes(y = .to)) +   coord_flip() +   theme(legend.position = \"bottom\")"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/default_time_units.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Time units from tsibble's ","text":"","code":"default_time_units(x)"},{"path":"https://tsibble.tidyverts.org/reference/default_time_units.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Time units from tsibble's ","text":"x interval.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/difference.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lagged differences — difference","text":"","code":"difference(x, lag = 1, differences = 1, default = NA, order_by = NULL)"},{"path":"https://tsibble.tidyverts.org/reference/difference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lagged differences — difference","text":"x vector lag positive integer indicating lag use. differences positive integer indicating order difference. default value used pad x back original size lag lead applied. default, NULL, pads missing value. supplied, must vector size 1, cast type x. order_by optional secondary vector defines ordering use applying lag lead x. supplied, must size x.","code":""},{"path":"https://tsibble.tidyverts.org/reference/difference.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lagged differences — difference","text":"numeric vector length x.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/difference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lagged differences — difference","text":"","code":"# examples from base difference(1:10, 2) #>  [1] NA NA  2  2  2  2  2  2  2  2 difference(1:10, 2, 2) #>  [1] NA NA NA NA  0  0  0  0  0  0 x <- cumsum(cumsum(1:10)) difference(x, lag = 2) #>  [1]  NA  NA   9  16  25  36  49  64  81 100 difference(x, differences = 2) #>  [1] NA NA  3  4  5  6  7  8  9 10 # Use order_by if data not already ordered (example from dplyr) library(dplyr, warn.conflicts = FALSE) tsbl <- tsibble(year = 2000:2005, value = (0:5)^2, index = year) scrambled <- tsbl %>% slice(sample(nrow(tsbl))) #> Warning: Current temporal ordering may yield unexpected results. #> ℹ Suggest to sort by ``, `year` first.  wrong <- mutate(scrambled, diff = difference(value)) #> Warning: Current temporal ordering may yield unexpected results. #> ℹ Suggest to sort by ``, `year` first. #> Warning: Current temporal ordering may yield unexpected results. #> ℹ Suggest to sort by ``, `year` first. arrange(wrong, year) #> # A tsibble: 6 x 3 [1Y] #>    year value  diff #>   <int> <dbl> <dbl> #> 1  2000     0   -25 #> 2  2001     1    -3 #> 3  2002     4    -5 #> 4  2003     9     9 #> 5  2004    16    NA #> 6  2005    25     9  right <- mutate(scrambled, diff = difference(value, order_by = year)) #> Warning: Current temporal ordering may yield unexpected results. #> ℹ Suggest to sort by ``, `year` first. #> Warning: Current temporal ordering may yield unexpected results. #> ℹ Suggest to sort by ``, `year` first. arrange(right, year) #> # A tsibble: 6 x 3 [1Y] #>    year value  diff #>   <int> <dbl> <dbl> #> 1  2000     0    NA #> 2  2001     1     1 #> 3  2002     4     3 #> 4  2003     9     5 #> 5  2004    16     7 #> 6  2005    25     9"},{"path":"https://tsibble.tidyverts.org/reference/duplicates.html","id":null,"dir":"Reference","previous_headings":"","what":"Test duplicated observations determined by key and index variables — is_duplicated","title":"Test duplicated observations determined by key and index variables — is_duplicated","text":"is_duplicated(): logical scalar data exist duplicated observations. are_duplicated(): logical vector, length row number data. duplicates(): identical key-index data entries.","code":""},{"path":"https://tsibble.tidyverts.org/reference/duplicates.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test duplicated observations determined by key and index variables — is_duplicated","text":"","code":"is_duplicated(data, key = NULL, index)  are_duplicated(data, key = NULL, index, from_last = FALSE)  duplicates(data, key = NULL, index)"},{"path":"https://tsibble.tidyverts.org/reference/duplicates.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test duplicated observations determined by key and index variables — is_duplicated","text":"data data frame creating tsibble. key Variable(s) uniquely determine time indices. NULL empty key, c() multiple variables. works tidy selector (e.g. dplyr::starts_with()). index variable specify time index variable. from_last TRUE duplication check last identical elements.","code":""},{"path":"https://tsibble.tidyverts.org/reference/duplicates.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test duplicated observations determined by key and index variables — is_duplicated","text":"","code":"harvest <- tibble(   year = c(2010, 2011, 2013, 2011, 2012, 2014, 2014),   fruit = c(rep(c(\"kiwi\", \"cherry\"), each = 3), \"cherry\"),   kilo = sample(1:10, size = 7) ) is_duplicated(harvest, key = fruit, index = year) #> [1] TRUE are_duplicated(harvest, key = fruit, index = year) #> [1] FALSE FALSE FALSE FALSE FALSE FALSE  TRUE are_duplicated(harvest, key = fruit, index = year, from_last = TRUE) #> [1] FALSE FALSE FALSE FALSE FALSE  TRUE FALSE duplicates(harvest, key = fruit, index = year) #> # A tibble: 2 × 3 #>    year fruit   kilo #>   <dbl> <chr>  <int> #> 1  2014 cherry    10 #> 2  2014 cherry     4"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/fill_gaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Turn implicit missing values into explicit missing values — fill_gaps","text":"","code":"fill_gaps(.data, ..., .full = FALSE, .start = NULL, .end = NULL)"},{"path":"https://tsibble.tidyverts.org/reference/fill_gaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Turn implicit missing values into explicit missing values — fill_gaps","text":".data tsibble. ... set name-value pairs. values provided replace missing values marked \"implicit\", leave previously existing NA untouched. empty: filled default NA. filled values functions. .full FALSE inserts NA keyed unit within period. TRUE fills NA entire time span data (.k.. fully balanced panel). start() pad NA starting point (.e. min(<index>)) across units. end() pad NA ending point (.e. max(<index>)) across units. .start, .end Set custom starting/ending time allows expand existing time spans.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/fill_gaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Turn implicit missing values into explicit missing values — fill_gaps","text":"","code":"harvest <- tsibble(   year = c(2010, 2011, 2013, 2011, 2012, 2014),   fruit = rep(c(\"kiwi\", \"cherry\"), each = 3),   kilo = sample(1:10, size = 6),   key = fruit, index = year )  # gaps as default `NA` fill_gaps(harvest, .full = TRUE) #> # A tsibble: 10 x 3 [1Y] #> # Key:       fruit [2] #>     year fruit   kilo #>    <dbl> <chr>  <int> #>  1  2010 cherry    NA #>  2  2011 cherry     4 #>  3  2012 cherry     5 #>  4  2013 cherry    NA #>  5  2014 cherry     8 #>  6  2010 kiwi       3 #>  7  2011 kiwi       2 #>  8  2012 kiwi      NA #>  9  2013 kiwi      10 #> 10  2014 kiwi      NA fill_gaps(harvest, .full = start()) #> # A tsibble: 9 x 3 [1Y] #> # Key:       fruit [2] #>    year fruit   kilo #>   <dbl> <chr>  <int> #> 1  2010 cherry    NA #> 2  2011 cherry     4 #> 3  2012 cherry     5 #> 4  2013 cherry    NA #> 5  2014 cherry     8 #> 6  2010 kiwi       3 #> 7  2011 kiwi       2 #> 8  2012 kiwi      NA #> 9  2013 kiwi      10 fill_gaps(harvest, .full = end()) #> # A tsibble: 9 x 3 [1Y] #> # Key:       fruit [2] #>    year fruit   kilo #>   <dbl> <chr>  <int> #> 1  2011 cherry     4 #> 2  2012 cherry     5 #> 3  2013 cherry    NA #> 4  2014 cherry     8 #> 5  2010 kiwi       3 #> 6  2011 kiwi       2 #> 7  2012 kiwi      NA #> 8  2013 kiwi      10 #> 9  2014 kiwi      NA fill_gaps(harvest, .start = 2009, .end = 2016) #> # A tsibble: 16 x 3 [1Y] #> # Key:       fruit [2] #>     year fruit   kilo #>    <dbl> <chr>  <int> #>  1  2009 cherry    NA #>  2  2010 cherry    NA #>  3  2011 cherry     4 #>  4  2012 cherry     5 #>  5  2013 cherry    NA #>  6  2014 cherry     8 #>  7  2015 cherry    NA #>  8  2016 cherry    NA #>  9  2009 kiwi      NA #> 10  2010 kiwi       3 #> 11  2011 kiwi       2 #> 12  2012 kiwi      NA #> 13  2013 kiwi      10 #> 14  2014 kiwi      NA #> 15  2015 kiwi      NA #> 16  2016 kiwi      NA full_harvest <- fill_gaps(harvest, .full = FALSE) full_harvest #> # A tsibble: 8 x 3 [1Y] #> # Key:       fruit [2] #>    year fruit   kilo #>   <dbl> <chr>  <int> #> 1  2011 cherry     4 #> 2  2012 cherry     5 #> 3  2013 cherry    NA #> 4  2014 cherry     8 #> 5  2010 kiwi       3 #> 6  2011 kiwi       2 #> 7  2012 kiwi      NA #> 8  2013 kiwi      10  # replace gaps with a specific value harvest %>%   fill_gaps(kilo = 0L) #> # A tsibble: 8 x 3 [1Y] #> # Key:       fruit [2] #>    year fruit   kilo #>   <dbl> <chr>  <int> #> 1  2011 cherry     4 #> 2  2012 cherry     5 #> 3  2013 cherry     0 #> 4  2014 cherry     8 #> 5  2010 kiwi       3 #> 6  2011 kiwi       2 #> 7  2012 kiwi       0 #> 8  2013 kiwi      10  # replace gaps using a function by variable harvest %>%   fill_gaps(kilo = sum(kilo)) #> # A tsibble: 8 x 3 [1Y] #> # Key:       fruit [2] #>    year fruit   kilo #>   <dbl> <chr>  <int> #> 1  2011 cherry     4 #> 2  2012 cherry     5 #> 3  2013 cherry    32 #> 4  2014 cherry     8 #> 5  2010 kiwi       3 #> 6  2011 kiwi       2 #> 7  2012 kiwi      32 #> 8  2013 kiwi      10  # replace gaps using a function for each group harvest %>%   group_by_key() %>%   fill_gaps(kilo = sum(kilo)) #> # A tsibble: 8 x 3 [1Y] #> # Key:       fruit [2] #> # Groups:    fruit [2] #>    year fruit   kilo #>   <dbl> <chr>  <int> #> 1  2011 cherry     4 #> 2  2012 cherry     5 #> 3  2013 cherry    17 #> 4  2014 cherry     8 #> 5  2010 kiwi       3 #> 6  2011 kiwi       2 #> 7  2012 kiwi      15 #> 8  2013 kiwi      10  # leaves existing `NA` untouched harvest[2, 3] <- NA harvest %>%   group_by_key() %>%   fill_gaps(kilo = sum(kilo, na.rm = TRUE)) #> # A tsibble: 8 x 3 [1Y] #> # Key:       fruit [2] #> # Groups:    fruit [2] #>    year fruit   kilo #>   <dbl> <chr>  <int> #> 1  2011 cherry     4 #> 2  2012 cherry    NA #> 3  2013 cherry    12 #> 4  2014 cherry     8 #> 5  2010 kiwi       3 #> 6  2011 kiwi       2 #> 7  2012 kiwi      15 #> 8  2013 kiwi      10  # replace NA pedestrian %>%   group_by_key() %>%   fill_gaps(Count = as.integer(median(Count))) #> # A tsibble: 69,048 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #> # Groups:    Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630 #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826 #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567 #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 #> # ℹ 69,038 more rows  if (!requireNamespace(\"tidyr\", quietly = TRUE)) {   stop(\"Please install the 'tidyr' package to run these following examples.\") } # use fill() to fill `NA` by previous/next entry pedestrian %>%   group_by_key() %>%   fill_gaps() %>%   tidyr::fill(Count, .direction = \"down\") #> # A tsibble: 69,048 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #> # Groups:    Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630 #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826 #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567 #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 #> # ℹ 69,038 more rows"},{"path":"https://tsibble.tidyverts.org/reference/filter_index.html","id":null,"dir":"Reference","previous_headings":"","what":"A shorthand for filtering time index for a tsibble — filter_index","title":"A shorthand for filtering time index for a tsibble — filter_index","text":"shorthand respects time zones encourages compact expressions.","code":""},{"path":"https://tsibble.tidyverts.org/reference/filter_index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A shorthand for filtering time index for a tsibble — filter_index","text":"","code":"filter_index(.data, ..., .preserve = FALSE)"},{"path":"https://tsibble.tidyverts.org/reference/filter_index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A shorthand for filtering time index for a tsibble — filter_index","text":".data tsibble. ... Formulas specify start end periods (inclusive), strings. ~ end . ~ end: beginning specified ending period. start ~ end: specified beginning ending periods. start ~ .: specified beginning end data. Supported index type: POSIXct (seconds), Date, yearweek, yearmonth/yearmon, yearquarter/yearqtr, hms/difftime & numeric. .preserve Relevant .data input grouped. .preserve = FALSE (default), grouping structure recalculated based resulting data, otherwise grouping kept .","code":""},{"path":"https://tsibble.tidyverts.org/reference/filter_index.html","id":"system-time-zone-europe-london-","dir":"Reference","previous_headings":"","what":"System Time Zone (\"Europe/London\")","title":"A shorthand for filtering time index for a tsibble — filter_index","text":"known issue extra hour gained machine setting time zone \"Europe/London\", regardless time zone associated POSIXct inputs. relates anytime Boost. Use Sys.timezone() check system time zone \"Europe/London\". recommended change global environment \"TZ\" equivalent names: GB, GB-Eire, Europe/Belfast, Europe/Guernsey, Europe/Isle_of_Man Europe/Jersey documented ?Sys.timezone(), using Sys.setenv(TZ = \"GB\") example.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/filter_index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"A shorthand for filtering time index for a tsibble — filter_index","text":"","code":"# from the starting time to the end of Feb, 2015 pedestrian %>%   filter_index(~ \"2015-02\") #> # A tsibble: 4,536 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630 #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826 #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567 #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 #> # ℹ 4,526 more rows  # entire Feb 2015, & from the beginning of Aug 2016 to the end pedestrian %>%   filter_index(\"2015-02\", \"2016-08\" ~ .) #> # A tsibble: 16,244 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-02-01 00:00:00 2015-02-01     0   178 #>  2 Birrarung Marr 2015-02-01 01:00:00 2015-02-01     1    39 #>  3 Birrarung Marr 2015-02-01 02:00:00 2015-02-01     2    41 #>  4 Birrarung Marr 2015-02-01 03:00:00 2015-02-01     3    32 #>  5 Birrarung Marr 2015-02-01 04:00:00 2015-02-01     4    33 #>  6 Birrarung Marr 2015-02-01 05:00:00 2015-02-01     5    39 #>  7 Birrarung Marr 2015-02-01 06:00:00 2015-02-01     6    45 #>  8 Birrarung Marr 2015-02-01 07:00:00 2015-02-01     7    45 #>  9 Birrarung Marr 2015-02-01 08:00:00 2015-02-01     8    96 #> 10 Birrarung Marr 2015-02-01 09:00:00 2015-02-01     9   116 #> # ℹ 16,234 more rows  # multiple time windows pedestrian %>%   filter_index(~\"2015-02\", \"2015-08\" ~ \"2015-09\", \"2015-12\" ~ \"2016-02\") #> # A tsibble: 19,008 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630 #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826 #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567 #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 #> # ℹ 18,998 more rows  # entire 2015 pedestrian %>%   filter_index(\"2015\") #> # A tsibble: 32,276 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630 #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826 #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567 #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 #> # ℹ 32,266 more rows  # specific pedestrian %>%   filter_index(\"2015-03-23\" ~ \"2015-10\") #> # A tsibble: 20,180 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-03-23 00:00:00 2015-03-23     0    39 #>  2 Birrarung Marr 2015-03-23 01:00:00 2015-03-23     1    24 #>  3 Birrarung Marr 2015-03-23 02:00:00 2015-03-23     2     1 #>  4 Birrarung Marr 2015-03-23 03:00:00 2015-03-23     3     3 #>  5 Birrarung Marr 2015-03-23 04:00:00 2015-03-23     4    16 #>  6 Birrarung Marr 2015-03-23 05:00:00 2015-03-23     5    36 #>  7 Birrarung Marr 2015-03-23 06:00:00 2015-03-23     6   178 #>  8 Birrarung Marr 2015-03-23 07:00:00 2015-03-23     7   462 #>  9 Birrarung Marr 2015-03-23 08:00:00 2015-03-23     8   756 #> 10 Birrarung Marr 2015-03-23 09:00:00 2015-03-23     9   289 #> # ℹ 20,170 more rows pedestrian %>%   filter_index(\"2015-03-23\" ~ \"2015-10-31\") #> # A tsibble: 20,180 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-03-23 00:00:00 2015-03-23     0    39 #>  2 Birrarung Marr 2015-03-23 01:00:00 2015-03-23     1    24 #>  3 Birrarung Marr 2015-03-23 02:00:00 2015-03-23     2     1 #>  4 Birrarung Marr 2015-03-23 03:00:00 2015-03-23     3     3 #>  5 Birrarung Marr 2015-03-23 04:00:00 2015-03-23     4    16 #>  6 Birrarung Marr 2015-03-23 05:00:00 2015-03-23     5    36 #>  7 Birrarung Marr 2015-03-23 06:00:00 2015-03-23     6   178 #>  8 Birrarung Marr 2015-03-23 07:00:00 2015-03-23     7   462 #>  9 Birrarung Marr 2015-03-23 08:00:00 2015-03-23     8   756 #> 10 Birrarung Marr 2015-03-23 09:00:00 2015-03-23     9   289 #> # ℹ 20,170 more rows pedestrian %>%   filter_index(\"2015-03-23 10\" ~ \"2015-10-31 12\") #> # A tsibble: 20,107 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-03-23 10:00:00 2015-03-23    10   199 #>  2 Birrarung Marr 2015-03-23 11:00:00 2015-03-23    11   120 #>  3 Birrarung Marr 2015-03-23 12:00:00 2015-03-23    12   317 #>  4 Birrarung Marr 2015-03-23 13:00:00 2015-03-23    13   583 #>  5 Birrarung Marr 2015-03-23 14:00:00 2015-03-23    14   265 #>  6 Birrarung Marr 2015-03-23 15:00:00 2015-03-23    15   275 #>  7 Birrarung Marr 2015-03-23 16:00:00 2015-03-23    16   409 #>  8 Birrarung Marr 2015-03-23 17:00:00 2015-03-23    17   698 #>  9 Birrarung Marr 2015-03-23 18:00:00 2015-03-23    18   546 #> 10 Birrarung Marr 2015-03-23 19:00:00 2015-03-23    19   276 #> # ℹ 20,097 more rows"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/group_by_key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by key variables — group_by_key","text":"","code":"group_by_key(.data, ..., .drop = key_drop_default(.data))"},{"path":"https://tsibble.tidyverts.org/reference/group_by_key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by key variables — group_by_key","text":".data tbl_ts object. ... Ignored. .drop Drop groups formed factor levels appear data? default TRUE except .data previously grouped .drop = FALSE. See group_by_drop_default() details.","code":""},{"path":"https://tsibble.tidyverts.org/reference/group_by_key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group by key variables — group_by_key","text":"","code":"tourism %>%   group_by_key() #> # A tsibble: 24,320 x 5 [1Q] #> # Key:       Region, State, Purpose [304] #> # Groups:    Region, State, Purpose [304] #>    Quarter Region   State           Purpose  Trips #>      <qtr> <chr>    <chr>           <chr>    <dbl> #>  1 1998 Q1 Adelaide South Australia Business  135. #>  2 1998 Q2 Adelaide South Australia Business  110. #>  3 1998 Q3 Adelaide South Australia Business  166. #>  4 1998 Q4 Adelaide South Australia Business  127. #>  5 1999 Q1 Adelaide South Australia Business  137. #>  6 1999 Q2 Adelaide South Australia Business  200. #>  7 1999 Q3 Adelaide South Australia Business  169. #>  8 1999 Q4 Adelaide South Australia Business  134. #>  9 2000 Q1 Adelaide South Australia Business  154. #> 10 2000 Q2 Adelaide South Australia Business  169. #> # ℹ 24,310 more rows"},{"path":"https://tsibble.tidyverts.org/reference/guess_frequency.html","id":null,"dir":"Reference","previous_headings":"","what":"Guess a time frequency from other index objects — guess_frequency","title":"Guess a time frequency from other index objects — guess_frequency","text":"possible frequency passed ts() function","code":""},{"path":"https://tsibble.tidyverts.org/reference/guess_frequency.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Guess a time frequency from other index objects — guess_frequency","text":"","code":"guess_frequency(x)"},{"path":"https://tsibble.tidyverts.org/reference/guess_frequency.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Guess a time frequency from other index objects — guess_frequency","text":"x index object including \"yearmonth\", \"yearquarter\", \"Date\" others.","code":""},{"path":"https://tsibble.tidyverts.org/reference/guess_frequency.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Guess a time frequency from other index objects — guess_frequency","text":"series observations collected frequently weekly, likely multiple seasonalities. function returns frequency value smallest. example, hourly data daily, weekly annual frequencies 24, 168 8766 respectively, hence gives 24.","code":""},{"path":"https://tsibble.tidyverts.org/reference/guess_frequency.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Guess a time frequency from other index objects — guess_frequency","text":"https://robjhyndman.com/hyndsight/seasonal-periods/","code":""},{"path":"https://tsibble.tidyverts.org/reference/guess_frequency.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Guess a time frequency from other index objects — guess_frequency","text":"","code":"guess_frequency(yearquarter(\"2016 Q1\") + 0:7) #> [1] 4 guess_frequency(yearmonth(\"2016 Jan\") + 0:23) #> [1] 12 guess_frequency(seq(as.Date(\"2017-01-01\"), as.Date(\"2017-01-31\"), by = 1)) #> [1] 7 guess_frequency(seq(   as.POSIXct(\"2017-01-01 00:00\"), as.POSIXct(\"2017-01-10 23:00\"),   by = \"1 hour\" )) #> [1] 24"},{"path":"https://tsibble.tidyverts.org/reference/has_gaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Does a tsibble have implicit gaps in time? — has_gaps","title":"Does a tsibble have implicit gaps in time? — has_gaps","text":"tsibble implicit gaps time?","code":""},{"path":"https://tsibble.tidyverts.org/reference/has_gaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does a tsibble have implicit gaps in time? — has_gaps","text":"","code":"has_gaps(.data, .full = FALSE, .name = \".gaps\", .start = NULL, .end = NULL)"},{"path":"https://tsibble.tidyverts.org/reference/has_gaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Does a tsibble have implicit gaps in time? — has_gaps","text":".data tsibble. .full FALSE inserts NA keyed unit within period. TRUE fills NA entire time span data (.k.. fully balanced panel). start() pad NA starting point (.e. min(<index>)) across units. end() pad NA ending point (.e. max(<index>)) across units. .name Strings name new columns. .start, .end Set custom starting/ending time allows expand existing time spans.","code":""},{"path":"https://tsibble.tidyverts.org/reference/has_gaps.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Does a tsibble have implicit gaps in time? — has_gaps","text":"tibble contains \"key\" variables new column .gaps TRUE/FALSE.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/has_gaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Does a tsibble have implicit gaps in time? — has_gaps","text":"","code":"harvest <- tsibble(   year = c(2010, 2011, 2013, 2011, 2012, 2013),   fruit = rep(c(\"kiwi\", \"cherry\"), each = 3),   kilo = sample(1:10, size = 6),   key = fruit, index = year ) has_gaps(harvest) #> # A tibble: 2 × 2 #>   fruit  .gaps #>   <chr>  <lgl> #> 1 cherry FALSE #> 2 kiwi   TRUE  has_gaps(harvest, .full = TRUE) #> # A tibble: 2 × 2 #>   fruit  .gaps #>   <chr>  <lgl> #> 1 cherry TRUE  #> 2 kiwi   TRUE  has_gaps(harvest, .full = start()) #> # A tibble: 2 × 2 #>   fruit  .gaps #>   <chr>  <lgl> #> 1 cherry TRUE  #> 2 kiwi   TRUE  has_gaps(harvest, .full = end()) #> # A tibble: 2 × 2 #>   fruit  .gaps #>   <chr>  <lgl> #> 1 cherry FALSE #> 2 kiwi   TRUE"},{"path":"https://tsibble.tidyverts.org/reference/holiday_aus.html","id":null,"dir":"Reference","previous_headings":"","what":"Australian national and state-based public holiday — holiday_aus","title":"Australian national and state-based public holiday — holiday_aus","text":"Australian national state-based public holiday","code":""},{"path":"https://tsibble.tidyverts.org/reference/holiday_aus.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Australian national and state-based public holiday — holiday_aus","text":"","code":"holiday_aus(year, state = \"national\")"},{"path":"https://tsibble.tidyverts.org/reference/holiday_aus.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Australian national and state-based public holiday — holiday_aus","text":"year vector integer(s) indicating year(s). state state Australia including \"ACT\", \"NSW\", \"NT\", \"QLD\", \"SA\", \"TAS\", \"VIC\", \"WA\", well \"national\".","code":""},{"path":"https://tsibble.tidyverts.org/reference/holiday_aus.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Australian national and state-based public holiday — holiday_aus","text":"tibble consisting holiday labels associated dates year(s).","code":""},{"path":"https://tsibble.tidyverts.org/reference/holiday_aus.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Australian national and state-based public holiday — holiday_aus","text":"documented public holidays: AFL public holidays Victoria Queen's Birthday Western Australia Royal Queensland Show Queensland, Brisbane function requires \"timeDate\" installed.","code":""},{"path":"https://tsibble.tidyverts.org/reference/holiday_aus.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Australian national and state-based public holiday — holiday_aus","text":"","code":"holiday_aus(2016, state = \"VIC\") #> # A tibble: 12 × 2 #>    holiday          date       #>    <chr>            <date>     #>  1 New Year's Day   2016-01-01 #>  2 Australia Day    2016-01-26 #>  3 Labour Day       2016-03-14 #>  4 Good Friday      2016-03-25 #>  5 Easter Saturday  2016-03-26 #>  6 Easter Sunday    2016-03-27 #>  7 Easter Monday    2016-03-28 #>  8 ANZAC Day        2016-04-25 #>  9 Queen's Birthday 2016-06-13 #> 10 Melbourne Cup    2016-11-01 #> 11 Boxing Day       2016-12-26 #> 12 Christmas Day    2016-12-27 holiday_aus(2013:2016, state = \"ACT\") #> # A tibble: 44 × 2 #>    holiday          date       #>    <chr>            <date>     #>  1 New Year's Day   2013-01-01 #>  2 Australia Day    2013-01-28 #>  3 Canberra Day     2013-03-11 #>  4 Good Friday      2013-03-29 #>  5 Easter Saturday  2013-03-30 #>  6 Easter Sunday    2013-03-31 #>  7 Easter Monday    2013-04-01 #>  8 ANZAC Day        2013-04-25 #>  9 Queen's Birthday 2013-06-10 #> 10 Christmas Day    2013-12-25 #> # ℹ 34 more rows"},{"path":"https://tsibble.tidyverts.org/reference/index-by.html","id":null,"dir":"Reference","previous_headings":"","what":"Group by time index and collapse with summarise() — index_by","title":"Group by time index and collapse with summarise() — index_by","text":"index_by() counterpart group_by() temporal context, groups time index. following operation applied partition index, similar group_by() dealing index . index_by() + summarise() update grouping index variable new index. Use ungroup() remove index grouping vars.","code":""},{"path":"https://tsibble.tidyverts.org/reference/index-by.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Group by time index and collapse with summarise() — index_by","text":"","code":"index_by(.data, ...)"},{"path":"https://tsibble.tidyverts.org/reference/index-by.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Group by time index and collapse with summarise() — index_by","text":".data tbl_ts. ... empty, grouping current index. empty, single expression required either existing variable name-value pair. lambda expression supported, example ~ .Date(.) . refers index variable. index functions can used, limited: lubridate::year: yearly aggregation yearquarter: quarterly aggregation yearmonth: monthly aggregation yearweek: weekly aggregation .Date lubridate::as_date: daily aggregation lubridate::ceiling_date, lubridate::floor_date, lubridate::round_date: fine-resolution aggregation Extract time components functions, lubridate::hour() & lubridate::day() index functions packages self-defined functions","code":""},{"path":"https://tsibble.tidyverts.org/reference/index-by.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Group by time index and collapse with summarise() — index_by","text":"index_by()-ed tsibble indicated @ \"Groups\" displaying screen.","code":""},{"path":"https://tsibble.tidyverts.org/reference/index-by.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Group by time index and collapse with summarise() — index_by","text":"","code":"pedestrian %>% index_by() #> # A tsibble: 66,037 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #> # Groups:    @ Date_Time [17,542] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630 #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826 #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567 #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 #> # ℹ 66,027 more rows # Monthly counts across sensors library(dplyr, warn.conflicts = FALSE) monthly_ped <- pedestrian %>%   group_by_key() %>%   index_by(Year_Month = ~ yearmonth(.)) %>%   summarise(     Max_Count = max(Count),     Min_Count = min(Count)   ) monthly_ped #> # A tsibble: 95 x 4 [1M] #> # Key:       Sensor [4] #>    Sensor         Year_Month Max_Count Min_Count #>    <chr>               <mth>     <int>     <int> #>  1 Birrarung Marr   2015 Jan      5524         1 #>  2 Birrarung Marr   2015 Feb     10121         1 #>  3 Birrarung Marr   2015 Mar      9858         1 #>  4 Birrarung Marr   2015 Apr      7293         1 #>  5 Birrarung Marr   2015 May      5129         1 #>  6 Birrarung Marr   2015 Jun      7556         0 #>  7 Birrarung Marr   2015 Jul     11224         1 #>  8 Birrarung Marr   2015 Aug      5684         0 #>  9 Birrarung Marr   2015 Sep      7757         0 #> 10 Birrarung Marr   2015 Oct      7085         1 #> # ℹ 85 more rows index(monthly_ped) #> Year_Month  # Using existing variable pedestrian %>%   group_by_key() %>%   index_by(Date) %>%   summarise(     Max_Count = max(Count),     Min_Count = min(Count)   ) #> # A tsibble: 2,752 x 4 [1D] #> # Key:       Sensor [4] #>    Sensor         Date       Max_Count Min_Count #>    <chr>          <date>         <int>     <int> #>  1 Birrarung Marr 2015-01-01      1630        44 #>  2 Birrarung Marr 2015-01-02       352         1 #>  3 Birrarung Marr 2015-01-03       226         3 #>  4 Birrarung Marr 2015-01-04       852         4 #>  5 Birrarung Marr 2015-01-05      1427         3 #>  6 Birrarung Marr 2015-01-06       937         5 #>  7 Birrarung Marr 2015-01-07       708         4 #>  8 Birrarung Marr 2015-01-08       568         9 #>  9 Birrarung Marr 2015-01-09      1629         5 #> 10 Birrarung Marr 2015-01-10      2439        10 #> # ℹ 2,742 more rows  # Attempt to aggregate to 4-hour interval, with the effects of DST pedestrian %>%   group_by_key() %>%   index_by(Date_Time4 = ~ lubridate::floor_date(., \"4 hour\")) %>%   summarise(Total_Count = sum(Count)) #> # A tsibble: 16,512 x 3 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time4          Total_Count #>    <chr>          <dttm>                    <int> #>  1 Birrarung Marr 2015-01-01 00:00:00        3287 #>  2 Birrarung Marr 2015-01-01 04:00:00         316 #>  3 Birrarung Marr 2015-01-01 08:00:00         995 #>  4 Birrarung Marr 2015-01-01 12:00:00        2117 #>  5 Birrarung Marr 2015-01-01 16:00:00        1829 #>  6 Birrarung Marr 2015-01-01 20:00:00         406 #>  7 Birrarung Marr 2015-01-02 00:00:00          44 #>  8 Birrarung Marr 2015-01-02 04:00:00         555 #>  9 Birrarung Marr 2015-01-02 08:00:00        1193 #> 10 Birrarung Marr 2015-01-02 12:00:00         822 #> # ℹ 16,502 more rows  library(lubridate, warn.conflicts = FALSE) # Annual trips by Region and State tourism %>%   index_by(Year = ~ year(.)) %>%   group_by(Region, State) %>%   summarise(Total = sum(Trips)) #> # A tsibble: 1,520 x 4 [1Y] #> # Key:       Region, State [76] #> # Groups:    Region [76] #>    Region   State            Year Total #>    <chr>    <chr>           <dbl> <dbl> #>  1 Adelaide South Australia  1998 2226. #>  2 Adelaide South Australia  1999 2218. #>  3 Adelaide South Australia  2000 2418. #>  4 Adelaide South Australia  2001 2264. #>  5 Adelaide South Australia  2002 2275. #>  6 Adelaide South Australia  2003 2203. #>  7 Adelaide South Australia  2004 2437. #>  8 Adelaide South Australia  2005 2034. #>  9 Adelaide South Australia  2006 2225. #> 10 Adelaide South Australia  2007 2317. #> # ℹ 1,510 more rows  # Rounding to financial year, using a custom function financial_year <- function(date) {   year <- year(date)   ifelse(quarter(date) <= 2, year, year + 1) } tourism %>%   index_by(Year = ~ financial_year(.)) %>%   summarise(Total = sum(Trips)) #> Error in mutate(ungrp, `:=`(!!idx2, f(!!sym(idx)))): ℹ In argument: `Year = f(Quarter)`. #> Caused by error in `financial_year()`: #> ! could not find function \"financial_year\""},{"path":"https://tsibble.tidyverts.org/reference/index-rd.html","id":null,"dir":"Reference","previous_headings":"","what":"Return index variable from a tsibble — index","title":"Return index variable from a tsibble — index","text":"Return index variable tsibble","code":""},{"path":"https://tsibble.tidyverts.org/reference/index-rd.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return index variable from a tsibble — index","text":"","code":"index(x)  index_var(x)  index2(x)  index2_var(x)"},{"path":"https://tsibble.tidyverts.org/reference/index-rd.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return index variable from a tsibble — index","text":"x tsibble object.","code":""},{"path":"https://tsibble.tidyverts.org/reference/index-rd.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return index variable from a tsibble — index","text":"","code":"index(pedestrian) #> Date_Time index_var(pedestrian) #> [1] \"Date_Time\""},{"path":"https://tsibble.tidyverts.org/reference/index_valid.html","id":null,"dir":"Reference","previous_headings":"","what":"Add custom index support for a tsibble — index_valid","title":"Add custom index support for a tsibble — index_valid","text":"S3 method add index type support tsibble.","code":""},{"path":"https://tsibble.tidyverts.org/reference/index_valid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add custom index support for a tsibble — index_valid","text":"","code":"index_valid(x)"},{"path":"https://tsibble.tidyverts.org/reference/index_valid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add custom index support for a tsibble — index_valid","text":"x object index type supported tsibble.","code":""},{"path":"https://tsibble.tidyverts.org/reference/index_valid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add custom index support for a tsibble — index_valid","text":"TRUE/FALSE NA (unsure)","code":""},{"path":"https://tsibble.tidyverts.org/reference/index_valid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Add custom index support for a tsibble — index_valid","text":"method primarily used adding index type support as_tsibble.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/index_valid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add custom index support for a tsibble — index_valid","text":"","code":"index_valid(seq(as.Date(\"2017-01-01\"), as.Date(\"2017-01-10\"), by = 1)) #> [1] TRUE"},{"path":"https://tsibble.tidyverts.org/reference/interval-pull.html","id":null,"dir":"Reference","previous_headings":"","what":"Pull time interval from a vector — interval_pull","title":"Pull time interval from a vector — interval_pull","text":"Assuming regularly spaced time, interval_pull() returns list time components \"interval\" class.","code":""},{"path":"https://tsibble.tidyverts.org/reference/interval-pull.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pull time interval from a vector — interval_pull","text":"","code":"interval_pull(x)"},{"path":"https://tsibble.tidyverts.org/reference/interval-pull.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pull time interval from a vector — interval_pull","text":"x vector index-like class.","code":""},{"path":"https://tsibble.tidyverts.org/reference/interval-pull.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pull time interval from a vector — interval_pull","text":"\"interval\" class (list) includes \"year\", \"quarter\", \"month\", \"week\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\", \"microsecond\", \"nanosecond\", \"unit\".","code":""},{"path":"https://tsibble.tidyverts.org/reference/interval-pull.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pull time interval from a vector — interval_pull","text":"Extend tsibble support custom time indexes defining S3 generics index_valid() interval_pull() .","code":""},{"path":"https://tsibble.tidyverts.org/reference/interval-pull.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pull time interval from a vector — interval_pull","text":"","code":"x <- seq(as.Date(\"2017-10-01\"), as.Date(\"2017-10-31\"), by = 3) interval_pull(x) #> <interval[1]> #> [1] 3D"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/is-tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"If the object is a tsibble — is_tsibble","text":"","code":"is_tsibble(x)  is_grouped_ts(x)"},{"path":"https://tsibble.tidyverts.org/reference/is-tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"If the object is a tsibble — is_tsibble","text":"x object.","code":""},{"path":"https://tsibble.tidyverts.org/reference/is-tsibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"If the object is a tsibble — is_tsibble","text":"TRUE object inherits tbl_ts class.","code":""},{"path":"https://tsibble.tidyverts.org/reference/is-tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"If the object is a tsibble — is_tsibble","text":"","code":"# A tibble is not a tsibble ---- tbl <- tibble(   date = seq(as.Date(\"2017-10-01\"), as.Date(\"2017-10-31\"), by = 1),   value = rnorm(31) ) is_tsibble(tbl) #> [1] FALSE  # A tsibble ---- tsbl <- as_tsibble(tbl, index = date) is_tsibble(tsbl) #> [1] TRUE"},{"path":"https://tsibble.tidyverts.org/reference/key-data.html","id":null,"dir":"Reference","previous_headings":"","what":"Key metadata — key_data","title":"Key metadata — key_data","text":"Key metadata","code":""},{"path":"https://tsibble.tidyverts.org/reference/key-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Key metadata — key_data","text":"","code":"key_data(.data)  key_rows(.data)  key_size(x)  n_keys(x)"},{"path":"https://tsibble.tidyverts.org/reference/key-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Key metadata — key_data","text":".data, x tsibble","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/key-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Key metadata — key_data","text":"","code":"key_data(pedestrian) #> # A tibble: 4 × 2 #>   Sensor                              .rows #> * <chr>                         <list<int>> #> 1 Birrarung Marr                   [14,566] #> 2 Bourke Street Mall (North)       [16,414] #> 3 QV Market-Elizabeth St (West)    [17,518] #> 4 Southern Cross Station           [17,539]"},{"path":"https://tsibble.tidyverts.org/reference/key.html","id":null,"dir":"Reference","previous_headings":"","what":"Return key variables — key","title":"Return key variables — key","text":"key() returns list symbols; key_vars() gives character vector.","code":""},{"path":"https://tsibble.tidyverts.org/reference/key.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return key variables — key","text":"","code":"key(x)  key_vars(x)"},{"path":"https://tsibble.tidyverts.org/reference/key.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return key variables — key","text":"x tsibble.","code":""},{"path":"https://tsibble.tidyverts.org/reference/key.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return key variables — key","text":"","code":"key(pedestrian) #> [[1]] #> Sensor #>  key_vars(pedestrian) #> [1] \"Sensor\"  key(tourism) #> [[1]] #> Region #>  #> [[2]] #> State #>  #> [[3]] #> Purpose #>  key_vars(tourism) #> [1] \"Region\"  \"State\"   \"Purpose\""},{"path":"https://tsibble.tidyverts.org/reference/key_drop_default.html","id":null,"dir":"Reference","previous_headings":"","what":"Default value for .drop argument for key — key_drop_default","title":"Default value for .drop argument for key — key_drop_default","text":"Default value .drop argument key","code":""},{"path":"https://tsibble.tidyverts.org/reference/key_drop_default.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Default value for .drop argument for key — key_drop_default","text":"","code":"key_drop_default(.tbl)"},{"path":"https://tsibble.tidyverts.org/reference/key_drop_default.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Default value for .drop argument for key — key_drop_default","text":".tbl data frame","code":""},{"path":"https://tsibble.tidyverts.org/reference/measured-vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Return measured variables — measures","title":"Return measured variables — measures","text":"Return measured variables","code":""},{"path":"https://tsibble.tidyverts.org/reference/measured-vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Return measured variables — measures","text":"","code":"measures(x)  measured_vars(x)"},{"path":"https://tsibble.tidyverts.org/reference/measured-vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Return measured variables — measures","text":"x tbl_ts.","code":""},{"path":"https://tsibble.tidyverts.org/reference/measured-vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Return measured variables — measures","text":"","code":"measures(pedestrian) #> [[1]] #> Date #>  #> [[2]] #> Time #>  #> [[3]] #> Count #>  measures(tourism) #> [[1]] #> Trips #>   measured_vars(pedestrian) #> [1] \"Date\"  \"Time\"  \"Count\" measured_vars(tourism) #> [1] \"Trips\""},{"path":"https://tsibble.tidyverts.org/reference/new-data.html","id":null,"dir":"Reference","previous_headings":"","what":"New tsibble data and append new observations to a tsibble — new_data","title":"New tsibble data and append new observations to a tsibble — new_data","text":"append_row(): add new rows start/end tsibble filling key-index pair NA measured variables. append_case() alias append_row().","code":""},{"path":"https://tsibble.tidyverts.org/reference/new-data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"New tsibble data and append new observations to a tsibble — new_data","text":"","code":"new_data(.data, n = 1L, ...)  # S3 method for tbl_ts new_data(.data, n = 1L, keep_all = FALSE, ...)  append_row(.data, n = 1L, ...)"},{"path":"https://tsibble.tidyverts.org/reference/new-data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"New tsibble data and append new observations to a tsibble — new_data","text":".data tbl_ts. n integer indicates number key-index pair append. n > 0, future observations n < 0, past observations ... Passed individual S3 method. keep_all TRUE keep measured variables well index key, otherwise index key.","code":""},{"path":"https://tsibble.tidyverts.org/reference/new-data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"New tsibble data and append new observations to a tsibble — new_data","text":"","code":"new_data(pedestrian) #> # A tsibble: 4 x 2 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>   Sensor                        Date_Time           #>   <chr>                         <dttm>              #> 1 Birrarung Marr                2017-01-01 00:00:00 #> 2 Bourke Street Mall (North)    2017-01-01 00:00:00 #> 3 QV Market-Elizabeth St (West) 2017-01-01 00:00:00 #> 4 Southern Cross Station        2017-01-01 00:00:00 new_data(pedestrian, keep_all = TRUE) #> # A tsibble: 4 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>   Sensor                        Date_Time           Date    Time Count #>   <chr>                         <dttm>              <date> <int> <int> #> 1 Birrarung Marr                2017-01-01 00:00:00 NA        NA    NA #> 2 Bourke Street Mall (North)    2017-01-01 00:00:00 NA        NA    NA #> 3 QV Market-Elizabeth St (West) 2017-01-01 00:00:00 NA        NA    NA #> 4 Southern Cross Station        2017-01-01 00:00:00 NA        NA    NA new_data(pedestrian, n = 3) #> # A tsibble: 12 x 2 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor                        Date_Time           #>    <chr>                         <dttm>              #>  1 Birrarung Marr                2017-01-01 00:00:00 #>  2 Birrarung Marr                2017-01-01 01:00:00 #>  3 Birrarung Marr                2017-01-01 02:00:00 #>  4 Bourke Street Mall (North)    2017-01-01 00:00:00 #>  5 Bourke Street Mall (North)    2017-01-01 01:00:00 #>  6 Bourke Street Mall (North)    2017-01-01 02:00:00 #>  7 QV Market-Elizabeth St (West) 2017-01-01 00:00:00 #>  8 QV Market-Elizabeth St (West) 2017-01-01 01:00:00 #>  9 QV Market-Elizabeth St (West) 2017-01-01 02:00:00 #> 10 Southern Cross Station        2017-01-01 00:00:00 #> 11 Southern Cross Station        2017-01-01 01:00:00 #> 12 Southern Cross Station        2017-01-01 02:00:00 new_data(pedestrian, n = -2) #> # A tsibble: 8 x 2 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>   Sensor                        Date_Time           #>   <chr>                         <dttm>              #> 1 Birrarung Marr                2014-12-31 22:00:00 #> 2 Birrarung Marr                2014-12-31 23:00:00 #> 3 Bourke Street Mall (North)    2015-02-16 22:00:00 #> 4 Bourke Street Mall (North)    2015-02-16 23:00:00 #> 5 QV Market-Elizabeth St (West) 2014-12-31 22:00:00 #> 6 QV Market-Elizabeth St (West) 2014-12-31 23:00:00 #> 7 Southern Cross Station        2014-12-31 22:00:00 #> 8 Southern Cross Station        2014-12-31 23:00:00  tsbl <- tsibble(   date = rep(as.Date(\"2017-01-01\") + 0:2, each = 2),   group = rep(letters[1:2], 3),   value = rnorm(6),   key = group ) #> Using `date` as index variable. append_row(tsbl) #> # A tsibble: 8 x 3 [1D] #> # Key:       group [2] #>   date       group  value #>   <date>     <chr>  <dbl> #> 1 2017-01-01 a     -0.657 #> 2 2017-01-02 a     -0.479 #> 3 2017-01-03 a      0.637 #> 4 2017-01-04 a     NA     #> 5 2017-01-01 b     -0.670 #> 6 2017-01-02 b      1.32  #> 7 2017-01-03 b      0.514 #> 8 2017-01-04 b     NA     append_row(tsbl, n = 2) #> # A tsibble: 10 x 3 [1D] #> # Key:       group [2] #>    date       group  value #>    <date>     <chr>  <dbl> #>  1 2017-01-01 a     -0.657 #>  2 2017-01-02 a     -0.479 #>  3 2017-01-03 a      0.637 #>  4 2017-01-04 a     NA     #>  5 2017-01-05 a     NA     #>  6 2017-01-01 b     -0.670 #>  7 2017-01-02 b      1.32  #>  8 2017-01-03 b      0.514 #>  9 2017-01-04 b     NA     #> 10 2017-01-05 b     NA     append_row(tsbl, n = -2) #> # A tsibble: 10 x 3 [1D] #> # Key:       group [2] #>    date       group  value #>    <date>     <chr>  <dbl> #>  1 2016-12-30 a     NA     #>  2 2016-12-31 a     NA     #>  3 2017-01-01 a     -0.657 #>  4 2017-01-02 a     -0.479 #>  5 2017-01-03 a      0.637 #>  6 2016-12-30 b     NA     #>  7 2016-12-31 b     NA     #>  8 2017-01-01 b     -0.670 #>  9 2017-01-02 b      1.32  #> 10 2017-01-03 b      0.514"},{"path":"https://tsibble.tidyverts.org/reference/new-interval.html","id":null,"dir":"Reference","previous_headings":"","what":"Interval constructor for a tsibble — new_interval","title":"Interval constructor for a tsibble — new_interval","text":"new_interval() creates interval object. gcd_interval() computes greatest common divisor difference numerics. is_regular_interval() checks interval regular.","code":""},{"path":"https://tsibble.tidyverts.org/reference/new-interval.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Interval constructor for a tsibble — new_interval","text":"","code":"new_interval(..., .regular = TRUE, .others = list())  is_regular_interval(x)  gcd_interval(x)"},{"path":"https://tsibble.tidyverts.org/reference/new-interval.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Interval constructor for a tsibble — new_interval","text":"... set name-value pairs specify default interval units: \"year\", \"quarter\", \"month\", \"week\", \"day\", \"hour\", \"minute\", \"second\", \"millisecond\", \"microsecond\", \"nanosecond\", \"unit\". .regular Logical. FALSE gives irregular interval, ignore ... argument. .others list name-value pairs included ..., allow custom interval. x interval.","code":""},{"path":"https://tsibble.tidyverts.org/reference/new-interval.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Interval constructor for a tsibble — new_interval","text":"\"interval\" class","code":""},{"path":"https://tsibble.tidyverts.org/reference/new-interval.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Interval constructor for a tsibble — new_interval","text":"","code":"(x <- new_interval(hour = 1, minute = 30)) #> <interval[1]> #> [1] 1h 30m (y <- new_interval(.regular = FALSE)) # irregular interval #> <interval[1]> #> [1] ! new_interval() # unknown interval #> <interval[1]> #> [1] ? new_interval(.others = list(semester = 1)) # custom interval #> <interval[1]> #> [1] 1semester is_regular_interval(x) #> [1] TRUE is_regular_interval(y) #> [1] FALSE gcd_interval(c(1, 3, 5, 6)) #> [1] 1"},{"path":"https://tsibble.tidyverts.org/reference/new_tsibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a subclass of a tsibble — new_tsibble","title":"Create a subclass of a tsibble — new_tsibble","text":"Create subclass tsibble","code":""},{"path":"https://tsibble.tidyverts.org/reference/new_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a subclass of a tsibble — new_tsibble","text":"","code":"new_tsibble(x, ..., class = NULL)"},{"path":"https://tsibble.tidyverts.org/reference/new_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a subclass of a tsibble — new_tsibble","text":"x tbl_ts, required. ... Name-value pairs defining new attributes tsibble. class Subclasses assign new object, default: none.","code":""},{"path":"https://tsibble.tidyverts.org/reference/pedestrian.html","id":null,"dir":"Reference","previous_headings":"","what":"Pedestrian counts in the city of Melbourne — pedestrian","title":"Pedestrian counts in the city of Melbourne — pedestrian","text":"dataset containing hourly pedestrian counts 2015-01-01 2016-12-31 4 sensors city Melbourne.","code":""},{"path":"https://tsibble.tidyverts.org/reference/pedestrian.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pedestrian counts in the city of Melbourne — pedestrian","text":"","code":"pedestrian"},{"path":"https://tsibble.tidyverts.org/reference/pedestrian.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Pedestrian counts in the city of Melbourne — pedestrian","text":"tsibble 66,071 rows 5 variables: Sensor: Sensor names (key) Date_Time: Date time pedestrian counts recorded (index) Date: Date pedestrian counts recorded Time: Hour associated Date_Time Counts: Hourly pedestrian counts","code":""},{"path":"https://tsibble.tidyverts.org/reference/pedestrian.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pedestrian counts in the city of Melbourne — pedestrian","text":"","code":"library(dplyr) data(pedestrian) # make implicit missingness to be explicit ---- pedestrian %>% fill_gaps() #> # A tsibble: 69,048 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630 #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826 #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567 #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 #> # ℹ 69,038 more rows # compute daily maximum counts across sensors ---- pedestrian %>%   group_by_key() %>%   index_by(Date) %>% # group by Date and use it as new index   summarise(MaxC = max(Count)) #> # A tsibble: 2,752 x 3 [1D] #> # Key:       Sensor [4] #>    Sensor         Date        MaxC #>    <chr>          <date>     <int> #>  1 Birrarung Marr 2015-01-01  1630 #>  2 Birrarung Marr 2015-01-02   352 #>  3 Birrarung Marr 2015-01-03   226 #>  4 Birrarung Marr 2015-01-04   852 #>  5 Birrarung Marr 2015-01-05  1427 #>  6 Birrarung Marr 2015-01-06   937 #>  7 Birrarung Marr 2015-01-07   708 #>  8 Birrarung Marr 2015-01-08   568 #>  9 Birrarung Marr 2015-01-09  1629 #> 10 Birrarung Marr 2015-01-10  2439 #> # ℹ 2,742 more rows"},{"path":"https://tsibble.tidyverts.org/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% generics intersect, setdiff, union tibble as_tibble, tibble","code":""},{"path":"https://tsibble.tidyverts.org/reference/regular.html","id":null,"dir":"Reference","previous_headings":"","what":"Meta-information of a tsibble — interval","title":"Meta-information of a tsibble — interval","text":"interval() returns interval tsibble. is_regular checks tsibble spaced regular time . is_ordered checks tsibble ordered key index.","code":""},{"path":"https://tsibble.tidyverts.org/reference/regular.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Meta-information of a tsibble — interval","text":"","code":"interval(x)  is_regular(x)  is_ordered(x)"},{"path":"https://tsibble.tidyverts.org/reference/regular.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Meta-information of a tsibble — interval","text":"x tsibble object.","code":""},{"path":"https://tsibble.tidyverts.org/reference/regular.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Meta-information of a tsibble — interval","text":"","code":"interval(pedestrian) #> Warning: tz(): Don't know how to compute timezone for object of class tbl_ts/tbl_df/tbl/data.frame; returning \"UTC\". #> <Interval[0]> is_regular(pedestrian) #> [1] TRUE is_ordered(pedestrian) #> [1] TRUE"},{"path":"https://tsibble.tidyverts.org/reference/scan_gaps.html","id":null,"dir":"Reference","previous_headings":"","what":"Scan a tsibble for implicit missing observations — scan_gaps","title":"Scan a tsibble for implicit missing observations — scan_gaps","text":"Scan tsibble implicit missing observations","code":""},{"path":"https://tsibble.tidyverts.org/reference/scan_gaps.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Scan a tsibble for implicit missing observations — scan_gaps","text":"","code":"scan_gaps(.data, .full = FALSE, .start = NULL, .end = NULL)"},{"path":"https://tsibble.tidyverts.org/reference/scan_gaps.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Scan a tsibble for implicit missing observations — scan_gaps","text":".data tsibble. .full FALSE inserts NA keyed unit within period. TRUE fills NA entire time span data (.k.. fully balanced panel). start() pad NA starting point (.e. min(<index>)) across units. end() pad NA ending point (.e. max(<index>)) across units. .start, .end Set custom starting/ending time allows expand existing time spans.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/scan_gaps.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Scan a tsibble for implicit missing observations — scan_gaps","text":"","code":"scan_gaps(pedestrian) #> # A tsibble: 3,011 x 2 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           #>    <chr>          <dttm>              #>  1 Birrarung Marr 2015-04-05 02:00:00 #>  2 Birrarung Marr 2015-05-07 00:00:00 #>  3 Birrarung Marr 2015-05-07 01:00:00 #>  4 Birrarung Marr 2015-05-07 02:00:00 #>  5 Birrarung Marr 2015-05-07 03:00:00 #>  6 Birrarung Marr 2015-05-07 04:00:00 #>  7 Birrarung Marr 2015-05-07 05:00:00 #>  8 Birrarung Marr 2015-05-07 06:00:00 #>  9 Birrarung Marr 2015-05-07 07:00:00 #> 10 Birrarung Marr 2015-05-07 08:00:00 #> # ℹ 3,001 more rows"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/slide_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform sliding windows on a tsibble by row — slide_tsibble","text":"","code":"slide_tsibble(.x, .size = 1, .step = 1, .id = \".id\")"},{"path":"https://tsibble.tidyverts.org/reference/slide_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform sliding windows on a tsibble by row — slide_tsibble","text":".x tsibble. .size positive integer window size. .step positive integer calculating every specified step instead every single step. .id character naming new column .id containing partition.","code":""},{"path":"https://tsibble.tidyverts.org/reference/slide_tsibble.html","id":"rolling-tsibble","dir":"Reference","previous_headings":"","what":"Rolling tsibble","title":"Perform sliding windows on a tsibble by row — slide_tsibble","text":"slide_tsibble(), tile_tsibble(), stretch_tsibble() provide fast shorthand rolling tsibble observations. said, supplied tsibble time gaps, rolling helpers ignore gaps proceed. useful preparing tsibble time series cross validation. return tsibble including new column .id part key. output dimension increase considerably slide_tsibble() stretch_tsibble(), likely run memory data large.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/slide_tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform sliding windows on a tsibble by row — slide_tsibble","text":"","code":"harvest <- tsibble(   year = rep(2010:2012, 2),   fruit = rep(c(\"kiwi\", \"cherry\"), each = 3),   kilo = sample(1:10, size = 6),   key = fruit, index = year ) harvest %>%   slide_tsibble(.size = 2) #> # A tsibble: 8 x 4 [1Y] #> # Key:       .id, fruit [4] #>    year fruit   kilo   .id #>   <int> <chr>  <int> <int> #> 1  2010 cherry     4     1 #> 2  2011 cherry     7     1 #> 3  2010 kiwi      10     1 #> 4  2011 kiwi       9     1 #> 5  2011 cherry     7     2 #> 6  2012 cherry     8     2 #> 7  2011 kiwi       9     2 #> 8  2012 kiwi       2     2"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/stretch_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform stretching windows on a tsibble by row — stretch_tsibble","text":"","code":"stretch_tsibble(.x, .step = 1, .init = 1, .id = \".id\")"},{"path":"https://tsibble.tidyverts.org/reference/stretch_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform stretching windows on a tsibble by row — stretch_tsibble","text":".x tsibble. .step positive integer incremental step. .init positive integer initial window size. .id character naming new column .id containing partition.","code":""},{"path":"https://tsibble.tidyverts.org/reference/stretch_tsibble.html","id":"rolling-tsibble","dir":"Reference","previous_headings":"","what":"Rolling tsibble","title":"Perform stretching windows on a tsibble by row — stretch_tsibble","text":"slide_tsibble(), tile_tsibble(), stretch_tsibble() provide fast shorthand rolling tsibble observations. said, supplied tsibble time gaps, rolling helpers ignore gaps proceed. useful preparing tsibble time series cross validation. return tsibble including new column .id part key. output dimension increase considerably slide_tsibble() stretch_tsibble(), likely run memory data large.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/stretch_tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform stretching windows on a tsibble by row — stretch_tsibble","text":"","code":"harvest <- tsibble(   year = rep(2010:2012, 2),   fruit = rep(c(\"kiwi\", \"cherry\"), each = 3),   kilo = sample(1:10, size = 6),   key = fruit, index = year ) harvest %>%   stretch_tsibble() #> # A tsibble: 12 x 4 [1Y] #> # Key:       .id, fruit [6] #>     year fruit   kilo   .id #>    <int> <chr>  <int> <int> #>  1  2010 cherry     7     1 #>  2  2010 kiwi       4     1 #>  3  2010 cherry     7     2 #>  4  2011 cherry    10     2 #>  5  2010 kiwi       4     2 #>  6  2011 kiwi       9     2 #>  7  2010 cherry     7     3 #>  8  2011 cherry    10     3 #>  9  2012 cherry     2     3 #> 10  2010 kiwi       4     3 #> 11  2011 kiwi       9     3 #> 12  2012 kiwi       3     3"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/tile_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform tiling windows on a tsibble by row — tile_tsibble","text":"","code":"tile_tsibble(.x, .size = 1, .id = \".id\")"},{"path":"https://tsibble.tidyverts.org/reference/tile_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform tiling windows on a tsibble by row — tile_tsibble","text":".x tsibble. .size positive integer window size. .id character naming new column .id containing partition.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tile_tsibble.html","id":"rolling-tsibble","dir":"Reference","previous_headings":"","what":"Rolling tsibble","title":"Perform tiling windows on a tsibble by row — tile_tsibble","text":"slide_tsibble(), tile_tsibble(), stretch_tsibble() provide fast shorthand rolling tsibble observations. said, supplied tsibble time gaps, rolling helpers ignore gaps proceed. useful preparing tsibble time series cross validation. return tsibble including new column .id part key. output dimension increase considerably slide_tsibble() stretch_tsibble(), likely run memory data large.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/tile_tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform tiling windows on a tsibble by row — tile_tsibble","text":"","code":"harvest <- tsibble(   year = rep(2010:2012, 2),   fruit = rep(c(\"kiwi\", \"cherry\"), each = 3),   kilo = sample(1:10, size = 6),   key = fruit, index = year ) harvest %>%   tile_tsibble(.size = 2) #> # A tsibble: 6 x 4 [1Y] #> # Key:       .id, fruit [4] #>    year fruit   kilo   .id #>   <int> <chr>  <int> <int> #> 1  2010 cherry     1     1 #> 2  2011 cherry     2     1 #> 3  2010 kiwi       3     1 #> 4  2011 kiwi       4     1 #> 5  2012 cherry     5     2 #> 6  2012 kiwi       6     2"},{"path":"https://tsibble.tidyverts.org/reference/time_in.html","id":null,"dir":"Reference","previous_headings":"","what":"If time falls in the ranges using compact expressions — time_in","title":"If time falls in the ranges using compact expressions — time_in","text":"function respects time zone encourages compact expressions.","code":""},{"path":"https://tsibble.tidyverts.org/reference/time_in.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"If time falls in the ranges using compact expressions — time_in","text":"","code":"time_in(x, ...)"},{"path":"https://tsibble.tidyverts.org/reference/time_in.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"If time falls in the ranges using compact expressions — time_in","text":"x vector time index, classes POSIXct, Date, yearweek, yearmonth, yearquarter, hms/difftime, numeric. ... Formulas specify start end periods (inclusive), strings. ~ end . ~ end: beginning specified ending period. start ~ end: specified beginning ending periods. start ~ .: specified beginning end data. Supported index type: POSIXct (seconds), Date, yearweek, yearmonth/yearmon, yearquarter/yearqtr, hms/difftime & numeric.","code":""},{"path":"https://tsibble.tidyverts.org/reference/time_in.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"If time falls in the ranges using compact expressions — time_in","text":"logical vector","code":""},{"path":"https://tsibble.tidyverts.org/reference/time_in.html","id":"system-time-zone-europe-london-","dir":"Reference","previous_headings":"","what":"System Time Zone (\"Europe/London\")","title":"If time falls in the ranges using compact expressions — time_in","text":"known issue extra hour gained machine setting time zone \"Europe/London\", regardless time zone associated POSIXct inputs. relates anytime Boost. Use Sys.timezone() check system time zone \"Europe/London\". recommended change global environment \"TZ\" equivalent names: GB, GB-Eire, Europe/Belfast, Europe/Guernsey, Europe/Isle_of_Man Europe/Jersey documented ?Sys.timezone(), using Sys.setenv(TZ = \"GB\") example.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/time_in.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"If time falls in the ranges using compact expressions — time_in","text":"","code":"x <- unique(pedestrian$Date_Time) lgl <- time_in(x, ~\"2015-02\", \"2015-08\" ~ \"2015-09\", \"2015-12\" ~ \"2016-02\") lgl[1:10] #>  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE # more specific lgl2 <- time_in(x, \"2015-03-23 10\" ~ \"2015-10-31 12\") lgl2[1:10] #>  [1] FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE FALSE  library(dplyr) pedestrian %>%   filter(time_in(Date_Time, \"2015-03-23 10\" ~ \"2015-10-31 12\")) #> # A tsibble: 20,107 x 5 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           Date        Time Count #>    <chr>          <dttm>              <date>     <int> <int> #>  1 Birrarung Marr 2015-03-23 10:00:00 2015-03-23    10   199 #>  2 Birrarung Marr 2015-03-23 11:00:00 2015-03-23    11   120 #>  3 Birrarung Marr 2015-03-23 12:00:00 2015-03-23    12   317 #>  4 Birrarung Marr 2015-03-23 13:00:00 2015-03-23    13   583 #>  5 Birrarung Marr 2015-03-23 14:00:00 2015-03-23    14   265 #>  6 Birrarung Marr 2015-03-23 15:00:00 2015-03-23    15   275 #>  7 Birrarung Marr 2015-03-23 16:00:00 2015-03-23    16   409 #>  8 Birrarung Marr 2015-03-23 17:00:00 2015-03-23    17   698 #>  9 Birrarung Marr 2015-03-23 18:00:00 2015-03-23    18   546 #> 10 Birrarung Marr 2015-03-23 19:00:00 2015-03-23    19   276 #> # ℹ 20,097 more rows pedestrian %>%   filter(time_in(Date_Time, \"2015\")) %>%   mutate(Season = ifelse(     time_in(Date_Time, \"2015-03\" ~ \"2015-08\"),     \"Autumn-Winter\", \"Spring-Summer\"   )) #> # A tsibble: 32,276 x 6 [1h] <Australia/Melbourne> #> # Key:       Sensor [4] #>    Sensor         Date_Time           Date        Time Count Season        #>    <chr>          <dttm>              <date>     <int> <int> <chr>         #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630 Spring-Summer #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826 Spring-Summer #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567 Spring-Summer #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 Spring-Summer #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 Spring-Summer #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 Spring-Summer #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 Spring-Summer #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 Spring-Summer #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 Spring-Summer #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 Spring-Summer #> # ℹ 32,266 more rows"},{"path":"https://tsibble.tidyverts.org/reference/tourism.html","id":null,"dir":"Reference","previous_headings":"","what":"Australian domestic overnight trips — tourism","title":"Australian domestic overnight trips — tourism","text":"dataset containing quarterly overnight trips 1998 Q1 2016 Q4 across Australia.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tourism.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Australian domestic overnight trips — tourism","text":"","code":"tourism"},{"path":"https://tsibble.tidyverts.org/reference/tourism.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Australian domestic overnight trips — tourism","text":"tsibble 23,408 rows 5 variables: Quarter: Year quarter (index) Region: tourism regions formed aggregation Statistical Local Areas (SLAs) defined various State Territory tourism authorities according research marketing needs State: States territories Australia Purpose: Stopover purpose visit: \"Holiday\" \"Visiting friends relatives\" \"Business\" \"reason\" Trips: Overnight trips thousands","code":""},{"path":"https://tsibble.tidyverts.org/reference/tourism.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Australian domestic overnight trips — tourism","text":"Tourism Research Australia","code":""},{"path":"https://tsibble.tidyverts.org/reference/tourism.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Australian domestic overnight trips — tourism","text":"","code":"library(dplyr) data(tourism) # Total trips over geographical regions tourism %>%   group_by(Region, State) %>%   summarise(Total_Trips = sum(Trips)) #> # A tsibble: 6,080 x 4 [1Q] #> # Key:       Region, State [76] #> # Groups:    Region [76] #>    Region   State           Quarter Total_Trips #>    <chr>    <chr>             <qtr>       <dbl> #>  1 Adelaide South Australia 1998 Q1        659. #>  2 Adelaide South Australia 1998 Q2        450. #>  3 Adelaide South Australia 1998 Q3        593. #>  4 Adelaide South Australia 1998 Q4        524. #>  5 Adelaide South Australia 1999 Q1        548. #>  6 Adelaide South Australia 1999 Q2        569. #>  7 Adelaide South Australia 1999 Q3        538. #>  8 Adelaide South Australia 1999 Q4        562. #>  9 Adelaide South Australia 2000 Q1        646. #> 10 Adelaide South Australia 2000 Q2        563. #> # ℹ 6,070 more rows"},{"path":"https://tsibble.tidyverts.org/reference/tsibble-package.html","id":null,"dir":"Reference","previous_headings":"","what":"tsibble: tidy temporal data frames and tools — tsibble-package","title":"tsibble: tidy temporal data frames and tools — tsibble-package","text":"tsibble package provides data class tbl_ts represent tidy temporal data. tsibble consists time index, key, measured variables data-centric format, built top tibble.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-package.html","id":"index","dir":"Reference","previous_headings":"","what":"Index","title":"tsibble: tidy temporal data frames and tools — tsibble-package","text":"extensive range indices supported tsibble: native time classes R (Date, POSIXct, difftime) tsibble's new additions (yearweek, yearmonth, yearquarter). commonly-used classes: ordered, hms::hms, lubridate::period, nanotime::nanotime. tbl_ts regular interval, choice index representation made. example, monthly data correspond time index created yearmonth, instead Date POSIXct. months year ensures regularity, 12 months every year. However, using Date, month containing days ranges 28 31 days, results irregular time space. also applicable year-week year-quarter. Tsibble supports arbitrary index classes, long can ordered past future. support custom class, need define index_valid() class calculate interval interval_pull().","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-package.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"tsibble: tidy temporal data frames and tools — tsibble-package","text":"Key variable(s) together index uniquely identifies record: Empty: implicit variable. NULL resulting univariate time series. single variable: example, data(pedestrian) uses Sensor key. Multiple variables: example, Declare key = c(Region, State, Purpose) data(tourism). Key can created conjunction tidy selectors like starts_with().","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-package.html","id":"interval","dir":"Reference","previous_headings":"","what":"Interval","title":"tsibble: tidy temporal data frames and tools — tsibble-package","text":"interval function returns interval associated tsibble. Regular: value time unit including \"nanosecond\", \"microsecond\", \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\". unrecognisable time interval labelled \"unit\". Irregular: as_tsibble(regular = FALSE) gives irregular tsibble. marked !. Unknown: determined (?), empty tsibble, one entry key variable. interval obtained based corresponding index representation: integerish numerics 1582 2499: \"year\" (Y). Note year 1582 saw beginning Gregorian Calendar switch. yearquarter: \"quarter\" (Q) yearmonth: \"month\" (M) yearweek: \"week\" (W) Date: \"day\" (D) difftime: \"week\" (W), \"day\" (D), \"hour\" (h), \"minute\" (m), \"second\" (s) POSIXt/hms: \"hour\" (h), \"minute\" (m), \"second\" (s), \"millisecond\" (us), \"microsecond\" (ms) period: \"year\" (Y), \"month\" (M), \"day\" (D), \"hour\" (h), \"minute\" (m), \"second\" (s), \"millisecond\" (us), \"microsecond\" (ms) nanotime: \"nanosecond\" (ns) numerics &ordered (ordered factor): \"unit\" interval obtained due mismatched index format, error issued. interval invariant subsetting, filter(), slice(), [.tbl_ts. However, result empty tsibble, interval always unknown. joining tsibble data sources aggregating different time scales, interval gets re-calculated.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-package.html","id":"time-zone","dir":"Reference","previous_headings":"","what":"Time zone","title":"tsibble: tidy temporal data frames and tools — tsibble-package","text":"Time zone corresponding index displayed index POSIXct. ? means obtained time zone zero-length character \"\".","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-package.html","id":"print-options","dir":"Reference","previous_headings":"","what":"Print options","title":"tsibble: tidy temporal data frames and tools — tsibble-package","text":"tsibble package fully utilises print method tibble. Please refer tibble::tibble-package change display options.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/tsibble-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"tsibble: tidy temporal data frames and tools — tsibble-package","text":"Maintainer: Earo Wang earo.wang@gmail.com (ORCID) Authors: Di Cook (ORCID) [thesis advisor] Rob Hyndman (ORCID) [thesis advisor] Mitchell O'Hara-Wild (ORCID) contributors: Tyler Smith [contributor] Wil Davis william.davis@worthingtonindustries.com [contributor]","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-package.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"tsibble: tidy temporal data frames and tools — tsibble-package","text":"","code":"# create a tsibble w/o a key ---- tsibble(   date = as.Date(\"2017-01-01\") + 0:9,   value = rnorm(10) ) #> Using `date` as index variable. #> # A tsibble: 10 x 2 [1D] #>    date         value #>    <date>       <dbl> #>  1 2017-01-01 -0.0613 #>  2 2017-01-02  0.0956 #>  3 2017-01-03 -0.543  #>  4 2017-01-04  0.498  #>  5 2017-01-05 -0.0419 #>  6 2017-01-06  0.496  #>  7 2017-01-07  0.901  #>  8 2017-01-08  1.62   #>  9 2017-01-09  0.379  #> 10 2017-01-10 -0.169   # create a tsibble with one key ---- tsibble(   qtr = rep(yearquarter(\"2010-01\") + 0:9, 3),   group = rep(c(\"x\", \"y\", \"z\"), each = 10),   value = rnorm(30),   key = group ) #> Using `qtr` as index variable. #> # A tsibble: 30 x 3 [1Q] #> # Key:       group [3] #>        qtr group  value #>      <qtr> <chr>  <dbl> #>  1 2010 Q1 x     -0.542 #>  2 2010 Q2 x     -1.45  #>  3 2010 Q3 x      0.180 #>  4 2010 Q4 x      0.498 #>  5 2011 Q1 x     -1.29  #>  6 2011 Q2 x      0.755 #>  7 2011 Q3 x     -0.267 #>  8 2011 Q4 x      0.642 #>  9 2012 Q1 x     -0.417 #> 10 2012 Q2 x     -1.22  #> # ℹ 20 more rows"},{"path":"https://tsibble.tidyverts.org/reference/tsibble-scales.html","id":null,"dir":"Reference","previous_headings":"","what":"tsibble scales for ggplot2 — tsibble-scales","title":"tsibble scales for ggplot2 — tsibble-scales","text":"Defines ggplot2 scales tsibble custom index: yearweek, yearmonth, yearquarter.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-scales.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"tsibble scales for ggplot2 — tsibble-scales","text":"","code":"scale_x_yearquarter(...)  scale_y_yearquarter(...)  scale_x_yearmonth(...)  scale_y_yearmonth(...)  scale_x_yearweek(...)  scale_y_yearweek(...)"},{"path":"https://tsibble.tidyverts.org/reference/tsibble-scales.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"tsibble scales for ggplot2 — tsibble-scales","text":"... Arguments passed ggplot2::scale_x_date().","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-scales.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"tsibble scales for ggplot2 — tsibble-scales","text":"ggproto object inheriting Scale","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-tidyverse.html","id":null,"dir":"Reference","previous_headings":"","what":"Tidyverse methods for tsibble — tsibble-tidyverse","title":"Tidyverse methods for tsibble — tsibble-tidyverse","text":"Current dplyr verbs tsibble support : dplyr::filter(), dplyr::slice(), dplyr::arrange() dplyr::select(), dplyr::transmute(), dplyr::mutate(), dplyr::relocate(), dplyr::summarise(), dplyr::group_by() dplyr::left_join(), dplyr::right_join(), dplyr::full_join(), dplyr::inner_join(), dplyr::semi_join(), dplyr::anti_join(), dplyr::nest_join() dplyr::bind_rows(), dplyr::bind_cols() Current tidyr verbs tsibble support : tidyr::pivot_longer(), tidyr::pivot_wider(), tidyr::gather(), tidyr::spread() tidyr::nest(), tidyr::fill(), tidyr::drop_na()","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-tidyverse.html","id":"column-wise-verbs","dir":"Reference","previous_headings":"","what":"Column-wise verbs","title":"Tidyverse methods for tsibble — tsibble-tidyverse","text":"index variable dropped tsibble object. key variable modified, check validity resulting tsibble performed internally. Use as_tibble() convert tsibble general data frame.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-tidyverse.html","id":"row-wise-verbs","dir":"Reference","previous_headings":"","what":"Row-wise verbs","title":"Tidyverse methods for tsibble — tsibble-tidyverse","text":"warning likely issued, observations arranged past--future order.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-tidyverse.html","id":"join-verbs","dir":"Reference","previous_headings":"","what":"Join verbs","title":"Tidyverse methods for tsibble — tsibble-tidyverse","text":"Joining data sources triggers check validity resulting tsibble.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-tidyverse.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tidyverse methods for tsibble — tsibble-tidyverse","text":"","code":"library(dplyr, warn.conflicts = FALSE) # `summarise()` a tsibble always aggregates over time # Sum over sensors pedestrian %>%   index_by() %>%   summarise(Total = sum(Count)) #> # A tsibble: 17,542 x 2 [1h] <Australia/Melbourne> #>    Date_Time           Total #>    <dttm>              <int> #>  1 2015-01-01 00:00:00  2866 #>  2 2015-01-01 01:00:00  1535 #>  3 2015-01-01 02:00:00   994 #>  4 2015-01-01 03:00:00   569 #>  5 2015-01-01 04:00:00   311 #>  6 2015-01-01 05:00:00   159 #>  7 2015-01-01 06:00:00   129 #>  8 2015-01-01 07:00:00   146 #>  9 2015-01-01 08:00:00   258 #> 10 2015-01-01 09:00:00   419 #> # ℹ 17,532 more rows # shortcut pedestrian %>%   summarise(Total = sum(Count)) #> # A tsibble: 17,542 x 2 [1h] <Australia/Melbourne> #>    Date_Time           Total #>    <dttm>              <int> #>  1 2015-01-01 00:00:00  2866 #>  2 2015-01-01 01:00:00  1535 #>  3 2015-01-01 02:00:00   994 #>  4 2015-01-01 03:00:00   569 #>  5 2015-01-01 04:00:00   311 #>  6 2015-01-01 05:00:00   159 #>  7 2015-01-01 06:00:00   129 #>  8 2015-01-01 07:00:00   146 #>  9 2015-01-01 08:00:00   258 #> 10 2015-01-01 09:00:00   419 #> # ℹ 17,532 more rows # Back to tibble pedestrian %>%   as_tibble() %>%   summarise(Total = sum(Count)) #> # A tibble: 1 × 1 #>      Total #>      <int> #> 1 45483871  library(tidyr) stocks <- tsibble(   time = as.Date(\"2009-01-01\") + 0:9,   X = rnorm(10, 0, 1),   Y = rnorm(10, 0, 2),   Z = rnorm(10, 0, 4) ) #> Using `time` as index variable. (stocksm <- stocks %>%   pivot_longer(-time, names_to = \"stock\", values_to = \"price\")) #> # A tsibble: 30 x 3 [1D] #> # Key:       stock [3] #>    time       stock  price #>    <date>     <chr>  <dbl> #>  1 2009-01-01 X      0.497 #>  2 2009-01-01 Y     -0.168 #>  3 2009-01-01 Z     -3.74  #>  4 2009-01-02 X      0.779 #>  5 2009-01-02 Y     -4.02  #>  6 2009-01-02 Z      1.17  #>  7 2009-01-03 X      1.51  #>  8 2009-01-03 Y     -1.03  #>  9 2009-01-03 Z      0.191 #> 10 2009-01-04 X     -1.82  #> # ℹ 20 more rows stocksm %>%   pivot_wider(names_from = stock, values_from = price) #> # A tsibble: 10 x 4 [1D] #>    time            X      Y      Z #>    <date>      <dbl>  <dbl>  <dbl> #>  1 2009-01-01  0.497 -0.168 -3.74  #>  2 2009-01-02  0.779 -4.02   1.17  #>  3 2009-01-03  1.51  -1.03   0.191 #>  4 2009-01-04 -1.82   0.203  1.78  #>  5 2009-01-05  0.788 -0.112  2.67  #>  6 2009-01-06 -0.973 -4.86  -1.25  #>  7 2009-01-07  0.893 -1.25  10.1   #>  8 2009-01-08  0.763 -1.75  -1.68  #>  9 2009-01-09  0.651  0.571  5.35  #> 10 2009-01-10 -0.536  0.688 -0.893"},{"path":"https://tsibble.tidyverts.org/reference/tsibble-vctrs.html","id":null,"dir":"Reference","previous_headings":"","what":"Internal vctrs methods — tsibble-vctrs","title":"Internal vctrs methods — tsibble-vctrs","text":"methods extensions allow tsibble objects work vctrs.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble-vctrs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Internal vctrs methods — tsibble-vctrs","text":"","code":"# S3 method for tbl_ts vec_ptype2(x, y, ...)  # S3 method for tbl_ts vec_cast(x, to, ...)  # S3 method for yearmonth vec_cast(x, to, ...)  # S3 method for yearmonth vec_ptype2(x, y, ...)  # S3 method for yearmonth vec_arith(op, x, y, ...)  # S3 method for yearmonth obj_print_data(x, ...)  # S3 method for yearquarter vec_cast(x, to, ...)  # S3 method for yearquarter vec_ptype2(x, y, ...)  # S3 method for yearquarter vec_arith(op, x, y, ...)  # S3 method for yearquarter obj_print_data(x, ...)  # S3 method for yearweek vec_cast(x, to, ...)  # S3 method for yearweek vec_ptype2(x, y, ...)  # S3 method for yearweek vec_arith(op, x, y, ...)"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a tsibble object — tsibble","text":"","code":"tsibble(..., key = NULL, index, regular = TRUE, .drop = TRUE)"},{"path":"https://tsibble.tidyverts.org/reference/tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a tsibble object — tsibble","text":"... set name-value pairs. key Variable(s) uniquely determine time indices. NULL empty key, c() multiple variables. works tidy selector (e.g. dplyr::starts_with()). index variable specify time index variable. regular Regular time interval (TRUE) irregular (FALSE). interval determined greatest common divisor index column, TRUE. .drop TRUE, empty key groups dropped.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a tsibble object — tsibble","text":"tsibble object.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a tsibble object — tsibble","text":"tsibble sorted key first index.","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble.html","id":"index","dir":"Reference","previous_headings":"","what":"Index","title":"Create a tsibble object — tsibble","text":"extensive range indices supported tsibble: native time classes R (Date, POSIXct, difftime) tsibble's new additions (yearweek, yearmonth, yearquarter). commonly-used classes: ordered, hms::hms, lubridate::period, nanotime::nanotime. tbl_ts regular interval, choice index representation made. example, monthly data correspond time index created yearmonth, instead Date POSIXct. months year ensures regularity, 12 months every year. However, using Date, month containing days ranges 28 31 days, results irregular time space. also applicable year-week year-quarter. Tsibble supports arbitrary index classes, long can ordered past future. support custom class, need define index_valid() class calculate interval interval_pull().","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble.html","id":"key","dir":"Reference","previous_headings":"","what":"Key","title":"Create a tsibble object — tsibble","text":"Key variable(s) together index uniquely identifies record: Empty: implicit variable. NULL resulting univariate time series. single variable: example, data(pedestrian) uses Sensor key. Multiple variables: example, Declare key = c(Region, State, Purpose) data(tourism). Key can created conjunction tidy selectors like starts_with().","code":""},{"path":"https://tsibble.tidyverts.org/reference/tsibble.html","id":"interval","dir":"Reference","previous_headings":"","what":"Interval","title":"Create a tsibble object — tsibble","text":"interval function returns interval associated tsibble. Regular: value time unit including \"nanosecond\", \"microsecond\", \"millisecond\", \"second\", \"minute\", \"hour\", \"day\", \"week\", \"month\", \"quarter\", \"year\". unrecognisable time interval labelled \"unit\". Irregular: as_tsibble(regular = FALSE) gives irregular tsibble. marked !. Unknown: determined (?), empty tsibble, one entry key variable. interval obtained based corresponding index representation: integerish numerics 1582 2499: \"year\" (Y). Note year 1582 saw beginning Gregorian Calendar switch. yearquarter: \"quarter\" (Q) yearmonth: \"month\" (M) yearweek: \"week\" (W) Date: \"day\" (D) difftime: \"week\" (W), \"day\" (D), \"hour\" (h), \"minute\" (m), \"second\" (s) POSIXt/hms: \"hour\" (h), \"minute\" (m), \"second\" (s), \"millisecond\" (us), \"microsecond\" (ms) period: \"year\" (Y), \"month\" (M), \"day\" (D), \"hour\" (h), \"minute\" (m), \"second\" (s), \"millisecond\" (us), \"microsecond\" (ms) nanotime: \"nanosecond\" (ns) numerics &ordered (ordered factor): \"unit\" interval obtained due mismatched index format, error issued. interval invariant subsetting, filter(), slice(), [.tbl_ts. However, result empty tsibble, interval always unknown. joining tsibble data sources aggregating different time scales, interval gets re-calculated.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a tsibble object — tsibble","text":"","code":"# create a tsibble w/o a key tsibble(   date = as.Date(\"2017-01-01\") + 0:9,   value = rnorm(10) ) #> Using `date` as index variable. #> # A tsibble: 10 x 2 [1D] #>    date         value #>    <date>       <dbl> #>  1 2017-01-01  0.593  #>  2 2017-01-02 -0.0653 #>  3 2017-01-03 -0.701  #>  4 2017-01-04 -0.529  #>  5 2017-01-05  0.170  #>  6 2017-01-06  0.114  #>  7 2017-01-07 -0.796  #>  8 2017-01-08 -0.236  #>  9 2017-01-09  1.19   #> 10 2017-01-10  0.188   # create a tsibble with a single variable for key tsibble(   qtr = rep(yearquarter(\"2010 Q1\") + 0:9, 3),   group = rep(c(\"x\", \"y\", \"z\"), each = 10),   value = rnorm(30),   key = group ) #> Using `qtr` as index variable. #> # A tsibble: 30 x 3 [1Q] #> # Key:       group [3] #>        qtr group   value #>      <qtr> <chr>   <dbl> #>  1 2010 Q1 x      1.04   #>  2 2010 Q2 x     -0.450  #>  3 2010 Q3 x     -0.709  #>  4 2010 Q4 x      0.0304 #>  5 2011 Q1 x     -0.450  #>  6 2011 Q2 x      0.671  #>  7 2011 Q3 x      1.77   #>  8 2011 Q4 x      0.635  #>  9 2012 Q1 x      0.368  #> 10 2012 Q2 x      1.38   #> # ℹ 20 more rows  # create a tsibble with multiple variables for key tsibble(   mth = rep(yearmonth(\"2010 Jan\") + 0:8, each = 3),   xyz = rep(c(\"x\", \"y\", \"z\"), each = 9),   abc = rep(letters[1:3], times = 9),   value = rnorm(27),   key = c(xyz, abc) ) #> Using `mth` as index variable. #> # A tsibble: 27 x 4 [1M] #> # Key:       xyz, abc [9] #>         mth xyz   abc    value #>       <mth> <chr> <chr>  <dbl> #>  1 2010 Jan x     a     -1.24  #>  2 2010 Feb x     a     -1.23  #>  3 2010 Mar x     a      0.115 #>  4 2010 Jan x     b     -1.06  #>  5 2010 Feb x     b      0.229 #>  6 2010 Mar x     b      1.50  #>  7 2010 Jan x     c     -1.04  #>  8 2010 Feb x     c      0.622 #>  9 2010 Mar x     c     -0.574 #> 10 2010 Apr y     a     -1.17  #> # ℹ 17 more rows  # create a tsibble containing \"key\" and \"index\" as column names tsibble(!!!list(   index = rep(yearquarter(\"2010 Q1\") + 0:9, 3),   key = rep(c(\"x\", \"y\", \"z\"), each = 10),   value = rnorm(30)),   key = key, index = index ) #> # A tsibble: 30 x 3 [1Q] #> # Key:       key [3] #>      index key    value #>      <qtr> <chr>  <dbl> #>  1 2010 Q1 x     -0.481 #>  2 2010 Q2 x      0.897 #>  3 2010 Q3 x     -0.519 #>  4 2010 Q4 x     -0.903 #>  5 2011 Q1 x      1.06  #>  6 2011 Q2 x      1.60  #>  7 2011 Q3 x      0.960 #>  8 2011 Q4 x     -0.142 #>  9 2012 Q1 x     -0.985 #> 10 2012 Q2 x      0.287 #> # ℹ 20 more rows"},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/unnest_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Unnest a data frame consisting of tsibbles to a tsibble — unnest_tsibble","text":"","code":"unnest_tsibble(data, cols, key = NULL, validate = TRUE)"},{"path":"https://tsibble.tidyverts.org/reference/unnest_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Unnest a data frame consisting of tsibbles to a tsibble — unnest_tsibble","text":"data data frame contains homogenous tsibbles list-columns. cols Names columns unnest. key Variable(s) uniquely determine time indices. NULL empty key, c() multiple variables. works tidy selector (e.g. dplyr::starts_with()). validate TRUE suggests verify key combination key variables leads unique time indices (.e. valid tsibble). sure valid input, specify FALSE skip checks.","code":""},{"path":"https://tsibble.tidyverts.org/reference/update_tsibble.html","id":null,"dir":"Reference","previous_headings":"","what":"Update key and index for a tsibble — update_tsibble","title":"Update key and index for a tsibble — update_tsibble","text":"Update key index tsibble","code":""},{"path":"https://tsibble.tidyverts.org/reference/update_tsibble.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update key and index for a tsibble — update_tsibble","text":"","code":"update_tsibble(   x,   key,   index,   regular = is_regular(x),   validate = TRUE,   .drop = key_drop_default(x) )"},{"path":"https://tsibble.tidyverts.org/reference/update_tsibble.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update key and index for a tsibble — update_tsibble","text":"x tsibble. key Variable(s) uniquely determine time indices. NULL empty key, c() multiple variables. works tidy selector (e.g. dplyr::starts_with()). index variable specify time index variable. regular Regular time interval (TRUE) irregular (FALSE). interval determined greatest common divisor index column, TRUE. validate TRUE suggests verify key combination key variables leads unique time indices (.e. valid tsibble). sure valid input, specify FALSE skip checks. .drop TRUE, empty key groups dropped.","code":""},{"path":"https://tsibble.tidyverts.org/reference/update_tsibble.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Update key and index for a tsibble — update_tsibble","text":"Unspecified arguments inherit attributes x.","code":""},{"path":"https://tsibble.tidyverts.org/reference/update_tsibble.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update key and index for a tsibble — update_tsibble","text":"","code":"# update index library(dplyr) pedestrian %>%   group_by_key() %>%   mutate(Hour_Since = Date_Time - min(Date_Time)) %>%   update_tsibble(index = Hour_Since) #> # A tsibble: 66,037 x 6 [1h] #> # Key:       Sensor [4] #> # Groups:    Sensor [4] #>    Sensor         Date_Time           Date        Time Count Hour_Since #>    <chr>          <dttm>              <date>     <int> <int> <drtn>     #>  1 Birrarung Marr 2015-01-01 00:00:00 2015-01-01     0  1630     0 secs #>  2 Birrarung Marr 2015-01-01 01:00:00 2015-01-01     1   826  3600 secs #>  3 Birrarung Marr 2015-01-01 02:00:00 2015-01-01     2   567  7200 secs #>  4 Birrarung Marr 2015-01-01 03:00:00 2015-01-01     3   264 10800 secs #>  5 Birrarung Marr 2015-01-01 04:00:00 2015-01-01     4   139 14400 secs #>  6 Birrarung Marr 2015-01-01 05:00:00 2015-01-01     5    77 18000 secs #>  7 Birrarung Marr 2015-01-01 06:00:00 2015-01-01     6    44 21600 secs #>  8 Birrarung Marr 2015-01-01 07:00:00 2015-01-01     7    56 25200 secs #>  9 Birrarung Marr 2015-01-01 08:00:00 2015-01-01     8   113 28800 secs #> 10 Birrarung Marr 2015-01-01 09:00:00 2015-01-01     9   166 32400 secs #> # ℹ 66,027 more rows  # update key: drop the variable \"State\" from the key tourism %>%   update_tsibble(key = c(Purpose, Region)) #> # A tsibble: 24,320 x 5 [1Q] #> # Key:       Purpose, Region [304] #>    Quarter Region   State           Purpose  Trips #>      <qtr> <chr>    <chr>           <chr>    <dbl> #>  1 1998 Q1 Adelaide South Australia Business  135. #>  2 1998 Q2 Adelaide South Australia Business  110. #>  3 1998 Q3 Adelaide South Australia Business  166. #>  4 1998 Q4 Adelaide South Australia Business  127. #>  5 1999 Q1 Adelaide South Australia Business  137. #>  6 1999 Q2 Adelaide South Australia Business  200. #>  7 1999 Q3 Adelaide South Australia Business  169. #>  8 1999 Q4 Adelaide South Australia Business  134. #>  9 2000 Q1 Adelaide South Australia Business  154. #> 10 2000 Q2 Adelaide South Australia Business  169. #> # ℹ 24,310 more rows"},{"path":"https://tsibble.tidyverts.org/reference/year-month.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent year-month — yearmonth","title":"Represent year-month — yearmonth","text":"Create coerce using yearmonth().","code":""},{"path":"https://tsibble.tidyverts.org/reference/year-month.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent year-month — yearmonth","text":"","code":"yearmonth(x, ...)  make_yearmonth(year = 1970L, month = 1L)  # S3 method for character yearmonth(x, format = NULL, ...)  is_yearmonth(x)"},{"path":"https://tsibble.tidyverts.org/reference/year-month.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent year-month — yearmonth","text":"x object. ... arguments methods. year, month vector numerics give years months. format vector strings specify additional formats x (e.g. %Y%m), warning error occurs.","code":""},{"path":"https://tsibble.tidyverts.org/reference/year-month.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent year-month — yearmonth","text":"year-month (yearmonth) objects.","code":""},{"path":"https://tsibble.tidyverts.org/reference/year-month.html","id":"display","dir":"Reference","previous_headings":"","what":"Display","title":"Represent year-month — yearmonth","text":"Use format() display yearweek, yearmonth, yearquarter objects required formats. Please see strptime() details supported conversion specifications.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/year-month.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent year-month — yearmonth","text":"","code":"# coerce POSIXct/Dates to yearmonth x <- seq(as.Date(\"2016-01-01\"), as.Date(\"2016-12-31\"), by = \"1 month\") yearmonth(x) #> <yearmonth[12]> #>  [1] \"2016 Jan\" \"2016 Feb\" \"2016 Mar\" \"2016 Apr\" \"2016 May\" \"2016 Jun\" #>  [7] \"2016 Jul\" \"2016 Aug\" \"2016 Sep\" \"2016 Oct\" \"2016 Nov\" \"2016 Dec\"  # parse characters yearmonth(c(\"2018 Jan\", \"2018-01\", \"2018 January\")) #> <yearmonth[3]> #> [1] \"2018 Jan\" \"2018 Jan\" \"2018 Jan\"  # seq() and arithmetic mth <- yearmonth(\"2017-11\") seq(mth, length.out = 10, by = 1) # by 1 month #> <yearmonth[10]> #>  [1] \"2017 Nov\" \"2017 Dec\" \"2018 Jan\" \"2018 Feb\" \"2018 Mar\" \"2018 Apr\" #>  [7] \"2018 May\" \"2018 Jun\" \"2018 Jul\" \"2018 Aug\" mth + 0:9 #> <yearmonth[10]> #>  [1] \"2017 Nov\" \"2017 Dec\" \"2018 Jan\" \"2018 Feb\" \"2018 Mar\" \"2018 Apr\" #>  [7] \"2018 May\" \"2018 Jun\" \"2018 Jul\" \"2018 Aug\"  # display formats format(mth, format = \"%y %m\") #> [1] \"17 11\"  # units since 1970 Jan as.double(yearmonth(\"1969 Jan\") + 0:24) #>  [1] -12 -11 -10  -9  -8  -7  -6  -5  -4  -3  -2  -1   0   1   2   3   4   5   6 #> [20]   7   8   9  10  11  12  make_yearmonth(year = 2021, month = 10:11) #> <yearmonth[2]> #> [1] \"2021 Oct\" \"2021 Nov\" make_yearmonth(year = 2020:2021, month = 10:11) #> <yearmonth[2]> #> [1] \"2020 Oct\" \"2021 Nov\""},{"path":"https://tsibble.tidyverts.org/reference/year-quarter.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent year-quarter — yearquarter","title":"Represent year-quarter — yearquarter","text":"Create coerce using yearquarter().","code":""},{"path":"https://tsibble.tidyverts.org/reference/year-quarter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent year-quarter — yearquarter","text":"","code":"yearquarter(x, fiscal_start = 1)  make_yearquarter(year = 1970L, quarter = 1L, fiscal_start = 1)  is_yearquarter(x)  fiscal_year(x)"},{"path":"https://tsibble.tidyverts.org/reference/year-quarter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent year-quarter — yearquarter","text":"x object. fiscal_start numeric indicating starting month fiscal year. year, quarter vector numerics give years quarters.","code":""},{"path":"https://tsibble.tidyverts.org/reference/year-quarter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent year-quarter — yearquarter","text":"year-quarter (yearquarter) objects.","code":""},{"path":"https://tsibble.tidyverts.org/reference/year-quarter.html","id":"display","dir":"Reference","previous_headings":"","what":"Display","title":"Represent year-quarter — yearquarter","text":"Use format() display yearweek, yearmonth, yearquarter objects required formats. Please see strptime() details supported conversion specifications.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/year-quarter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent year-quarter — yearquarter","text":"","code":"# coerce POSIXct/Dates to yearquarter x <- seq(as.Date(\"2016-01-01\"), as.Date(\"2016-12-31\"), by = \"1 quarter\") yearquarter(x) #> <yearquarter[4]> #> [1] \"2016 Q1\" \"2016 Q2\" \"2016 Q3\" \"2016 Q4\" #> # Year starts on: January yearquarter(x, fiscal_start = 6) #> <yearquarter[4]> #> [1] \"2016 Q3\" \"2016 Q4\" \"2017 Q1\" \"2017 Q2\" #> # Year starts on: June  # parse characters yearquarter(c(\"2018 Q1\", \"2018 Qtr1\", \"2018 Quarter 1\")) #> <yearquarter[3]> #> [1] \"2018 Q1\" \"2018 Q1\" \"2018 Q1\" #> # Year starts on: January  # seq() and arithmetic qtr <- yearquarter(\"2017 Q1\") seq(qtr, length.out = 10, by = 1) # by 1 quarter #> <yearquarter[10]> #>  [1] \"2017 Q1\" \"2017 Q2\" \"2017 Q3\" \"2017 Q4\" \"2018 Q1\" \"2018 Q2\" \"2018 Q3\" #>  [8] \"2018 Q4\" \"2019 Q1\" \"2019 Q2\" #> # Year starts on: January qtr + 0:9 #> <yearquarter[10]> #>  [1] \"2017 Q1\" \"2017 Q2\" \"2017 Q3\" \"2017 Q4\" \"2018 Q1\" \"2018 Q2\" \"2018 Q3\" #>  [8] \"2018 Q4\" \"2019 Q1\" \"2019 Q2\" #> # Year starts on: January  # display formats format(qtr, format = \"%y Qtr%q\") #> [1] \"17 Qtr1\"  make_yearquarter(year = 2021, quarter = 2:3) #> <yearquarter[2]> #> [1] \"2021 Q2\" \"2021 Q3\" #> # Year starts on: January make_yearquarter(year = 2020:2021, quarter = 2:3) #> <yearquarter[2]> #> [1] \"2020 Q2\" \"2021 Q3\" #> # Year starts on: January  # `fiscal_year()` helps to extract fiscal year y <- yearquarter(as.Date(\"2020-06-01\"), fiscal_start = 6) fiscal_year(y) #> [1] 2021 lubridate::year(y) # calendar years #> [1] 2020"},{"path":"https://tsibble.tidyverts.org/reference/year-week.html","id":null,"dir":"Reference","previous_headings":"","what":"Represent year-week based on the ISO 8601 standard (with flexible start day) — yearweek","title":"Represent year-week based on the ISO 8601 standard (with flexible start day) — yearweek","text":"Create coerce using yearweek().","code":""},{"path":"https://tsibble.tidyverts.org/reference/year-week.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Represent year-week based on the ISO 8601 standard (with flexible start day) — yearweek","text":"","code":"yearweek(x, week_start = getOption(\"lubridate.week.start\", 1))  make_yearweek(   year = 1970L,   week = 1L,   week_start = getOption(\"lubridate.week.start\", 1) )  is_yearweek(x)  is_53weeks(year, week_start = getOption(\"lubridate.week.start\", 1))"},{"path":"https://tsibble.tidyverts.org/reference/year-week.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Represent year-week based on the ISO 8601 standard (with flexible start day) — yearweek","text":"x object. week_start integer 1 (Monday) 7 (Sunday) specify day week starts following ISO conventions. Default 1 (Monday). Use options(lubridate.week.start = 7) set parameter globally. year, week vector numerics give years weeks.","code":""},{"path":"https://tsibble.tidyverts.org/reference/year-week.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Represent year-week based on the ISO 8601 standard (with flexible start day) — yearweek","text":"year-week (yearweek) objects. TRUE/FALSE year 53 ISO weeks.","code":""},{"path":"https://tsibble.tidyverts.org/reference/year-week.html","id":"display","dir":"Reference","previous_headings":"","what":"Display","title":"Represent year-week based on the ISO 8601 standard (with flexible start day) — yearweek","text":"Use format() display yearweek, yearmonth, yearquarter objects required formats. Please see strptime() details supported conversion specifications.","code":""},{"path":[]},{"path":"https://tsibble.tidyverts.org/reference/year-week.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Represent year-week based on the ISO 8601 standard (with flexible start day) — yearweek","text":"","code":"# coerce POSIXct/Dates to yearweek x <- seq(as.Date(\"2016-01-01\"), as.Date(\"2016-12-31\"), by = \"1 week\") yearweek(x) #> <yearweek[53]> #>  [1] \"2015 W53\" \"2016 W01\" \"2016 W02\" \"2016 W03\" \"2016 W04\" \"2016 W05\" #>  [7] \"2016 W06\" \"2016 W07\" \"2016 W08\" \"2016 W09\" \"2016 W10\" \"2016 W11\" #> [13] \"2016 W12\" \"2016 W13\" \"2016 W14\" \"2016 W15\" \"2016 W16\" \"2016 W17\" #> [19] \"2016 W18\" \"2016 W19\" \"2016 W20\" \"2016 W21\" \"2016 W22\" \"2016 W23\" #> [25] \"2016 W24\" \"2016 W25\" \"2016 W26\" \"2016 W27\" \"2016 W28\" \"2016 W29\" #> [31] \"2016 W30\" \"2016 W31\" \"2016 W32\" \"2016 W33\" \"2016 W34\" \"2016 W35\" #> [37] \"2016 W36\" \"2016 W37\" \"2016 W38\" \"2016 W39\" \"2016 W40\" \"2016 W41\" #> [43] \"2016 W42\" \"2016 W43\" \"2016 W44\" \"2016 W45\" \"2016 W46\" \"2016 W47\" #> [49] \"2016 W48\" \"2016 W49\" \"2016 W50\" \"2016 W51\" \"2016 W52\" #> # Week starts on: Monday yearweek(x, week_start = 7) #> <yearweek[53]> #>  [1] \"2015 W52\" \"2016 W01\" \"2016 W02\" \"2016 W03\" \"2016 W04\" \"2016 W05\" #>  [7] \"2016 W06\" \"2016 W07\" \"2016 W08\" \"2016 W09\" \"2016 W10\" \"2016 W11\" #> [13] \"2016 W12\" \"2016 W13\" \"2016 W14\" \"2016 W15\" \"2016 W16\" \"2016 W17\" #> [19] \"2016 W18\" \"2016 W19\" \"2016 W20\" \"2016 W21\" \"2016 W22\" \"2016 W23\" #> [25] \"2016 W24\" \"2016 W25\" \"2016 W26\" \"2016 W27\" \"2016 W28\" \"2016 W29\" #> [31] \"2016 W30\" \"2016 W31\" \"2016 W32\" \"2016 W33\" \"2016 W34\" \"2016 W35\" #> [37] \"2016 W36\" \"2016 W37\" \"2016 W38\" \"2016 W39\" \"2016 W40\" \"2016 W41\" #> [43] \"2016 W42\" \"2016 W43\" \"2016 W44\" \"2016 W45\" \"2016 W46\" \"2016 W47\" #> [49] \"2016 W48\" \"2016 W49\" \"2016 W50\" \"2016 W51\" \"2016 W52\" #> # Week starts on: Sunday  # parse characters yearweek(c(\"2018 W01\", \"2018 Wk01\", \"2018 Week 1\")) #> <yearweek[3]> #> [1] \"2018 W01\" \"2018 W01\" \"2018 W01\" #> # Week starts on: Monday  # seq() and arithmetic wk1 <- yearweek(\"2017 W50\") wk2 <- yearweek(\"2018 W12\") seq(from = wk1, to = wk2, by = 2) #> <yearweek[8]> #> [1] \"2017 W50\" \"2017 W52\" \"2018 W02\" \"2018 W04\" \"2018 W06\" \"2018 W08\" \"2018 W10\" #> [8] \"2018 W12\" #> # Week starts on: Monday wk1 + 0:9 #> <yearweek[10]> #>  [1] \"2017 W50\" \"2017 W51\" \"2017 W52\" \"2018 W01\" \"2018 W02\" \"2018 W03\" #>  [7] \"2018 W04\" \"2018 W05\" \"2018 W06\" \"2018 W07\" #> # Week starts on: Monday  # display formats format(c(wk1, wk2), format = \"%V/%Y\") #> [1] \"50/2017\" \"12/2018\"  make_yearweek(year = 2021, week = 10:11) #> <yearweek[2]> #> [1] \"2021 W10\" \"2021 W11\" #> # Week starts on: Monday make_yearweek(year = 2020:2021, week = 10:11) #> <yearweek[2]> #> [1] \"2020 W10\" \"2021 W11\" #> # Week starts on: Monday  is_53weeks(2015:2016) #> [1]  TRUE FALSE is_53weeks(1969) #> [1] FALSE is_53weeks(1969, week_start = 7) #> [1] TRUE"},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-115","dir":"Changelog","previous_headings":"","what":"tsibble 1.1.5","title":"tsibble 1.1.5","text":"Fix difference() giving extra NA values time series shorter lag length. (#310, @mitchelloharawild)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-114","dir":"Changelog","previous_headings":"","what":"tsibble 1.1.4","title":"tsibble 1.1.4","text":"CRAN release: 2024-01-29 Fixed vec_ptype2() yearweek yearquarter non-default week start. (#299) Fixed count_gaps() warning message due dplyr deprecation favour reframe(). (#295)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-113","dir":"Changelog","previous_headings":"","what":"tsibble 1.1.3","title":"tsibble 1.1.3","text":"CRAN release: 2022-10-09 Fixed argument .full *_gaps() inputs like T, F valid. (#275) Fixed validation index2 build_tsibble() column name contains “index”. (#284) longer export time() methods (renamed time_ts()) avoid contaminating time() stats::window(). (#277)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-112","dir":"Changelog","previous_headings":"","what":"tsibble 1.1.2","title":"tsibble 1.1.2","text":"CRAN release: 2022-08-21 Re-document fix HTML issues .Rd","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-111","dir":"Changelog","previous_headings":"","what":"tsibble 1.1.1","title":"tsibble 1.1.1","text":"CRAN release: 2021-12-03 New functions make_year*() easily supply time components. Supported stats::start() stats::end() .full argument *_gaps(), *_gaps() used packages. (#269)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-110","dir":"Changelog","previous_headings":"","what":"tsibble 1.1.0","title":"tsibble 1.1.0","text":"CRAN release: 2021-10-22 Abort rbind() cbind() tsibble, suggest use bind_rows() bind_cols() instead. (#256) Fixed bug filter_in() yearweek class different week starts default. (#261) Improved .ts.tbl_ts() better handle tsibble multiple key variables single value. (#258) Added new arguments .start .end *_gaps() custom starting ending time. (#259) Fixed bug holiday_aus() Boxing Day. falling Sat/Sun, holiday forwarded 2 days. (#251) Added count() tally() S3 methods tsibble behave like tibble input, hence add_count() add_tally(). (#232) Added warning yearmonth.character() inputs numbers without delimiter. (#264) NA accepted year*(), instead errors .","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-101","dir":"Changelog","previous_headings":"","what":"tsibble 1.0.1","title":"tsibble 1.0.1","text":"CRAN release: 2021-04-12 Fixed format bug yearmonth(). (#250, @mitchelloharawild)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-100","dir":"Changelog","previous_headings":"","what":"tsibble 1.0.0","title":"tsibble 1.0.0","text":"CRAN release: 2021-02-20 Fixed bug different yearmonth() underlying data character inputs. (#226) Fixed C stack error index contains NA as_tsibble(). (#229) Fixed bug missing year*(). (#228) Removed rolling functions. Removed dependency {purrr}. Added set operations (intersect(), union(), setdiff()) year* class. (#235, @wkdavis) Fixed bug full_join() produces output wrong temporal order. (#247) yearmonth() supported character formats. (#142)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-093","dir":"Changelog","previous_headings":"","what":"tsibble 0.9.3","title":"tsibble 0.9.3","text":"CRAN release: 2020-10-06 Defunct rolling functions favour {slider}. Dropped support summarise_all(), made dplyr::across() compatible summarise.tbl_ts(). Fixed bug custom ggplot scaling functions --limit breaks. (#195, #219, @TylerGrantSmith) Fixed crashing bug grouped_ts[0L, ]. (#194, @TylerGrantSmith)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-092","dir":"Changelog","previous_headings":"","what":"tsibble 0.9.2","title":"tsibble 0.9.2","text":"CRAN release: 2020-07-24 Fixed bug new_data() yearweek class. (#199) Added index support lubridate::Period, since Period can ordered now. (#42) Added {lubridate}’s S4 methods .period() .duration() interval class. (#206) yearweek() gained new argument week_start specify day week starts based ISO 8601 standard. (#205) yearquarter() gained new argument fiscal_start specify starting month fiscal year. (#174)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-091","dir":"Changelog","previous_headings":"","what":"tsibble 0.9.1","title":"tsibble 0.9.1","text":"CRAN release: 2020-06-20 Fixed bugs index_by() + summarise() grouped factors. (#197) Fixed select() removing redundant key. (#196) Added new message new_data.grouped_ts() inform “grouping structure ignored”. (#193) vec_slice() updates tsibble data attributes.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-090","dir":"Changelog","previous_headings":"","what":"tsibble 0.9.0","title":"tsibble 0.9.0","text":"CRAN release: 2020-06-04 release uses vctrs package internally {tsibble}.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"breaking-changes-0-9-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tsibble 0.9.0","text":"“interval” class formally defined record type vctrs framework. new_interval() uses new interface create interval supports custom interval. Old tsibble objects receive error “corrupt tsibble”.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-features-0-9-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tsibble 0.9.0","text":".full argument *_gaps supports two options, start() end(), padding NA either starting ending time. (#147) argument n new_data() append_row() supports negative integer, appending past observations data. (#186) New set scale_[x/y/colour/size/alpha/fill]_year*() custom ggplot2 scales. Added pivot_longer() pivot_wider() supporting methods tsibble. bind_rows() bind_cols() now possible tsibble dplyr v1.0.0.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"improvements-0-9-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"tsibble 0.9.0","text":"select() tsibble now keeps index key default. (#155) Added tidyr::drop_na() support tsibble. (#173)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-9-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.9.0","text":"Fixed bug .ts.tbl_ts() ignoring implicit missings. (#160)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"deprecated-functions-0-9-0","dir":"Changelog","previous_headings":"","what":"Deprecated functions","title":"tsibble 0.9.0","text":"Deprecated window functions favour {slider} package. (#143) Deprecated units_since() favour vec_cast(). Remove .tsibble(). Defunct .tsibble().","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-086","dir":"Changelog","previous_headings":"","what":"tsibble 0.8.6","title":"tsibble 0.8.6","text":"CRAN release: 2020-01-31 maintenance release due tidyselect v1.0.0 changes.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-085","dir":"Changelog","previous_headings":"","what":"tsibble 0.8.5","title":"tsibble 0.8.5","text":"CRAN release: 2019-11-03 maintenance release CRAN fixes.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-084","dir":"Changelog","previous_headings":"","what":"tsibble 0.8.4","title":"tsibble 0.8.4","text":"CRAN release: 2019-09-17 maintenance release due changes upstream package. Removed strong dependency tidyr Suggests. Soft deprecated .tsibble(). has_gaps() & count_gaps() gained new argument .name naming new columns. Improved speed performance new_data()/append_row(). Improved speed performance .ts.tbl_ts() converting tsibble ts. Added support POSIXlt index. interval obtained due mismatched index class, error issued instead warning . interval invariant subsetting, filter(), slice(), [.tbl_ts. Rolling window functions, like slide(), slided “questioning” lifecycle, favour slide package. (#143)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-083","dir":"Changelog","previous_headings":"","what":"tsibble 0.8.3","title":"tsibble 0.8.3","text":"CRAN release: 2019-07-29 Added lifecycle badges functions. index_by() supports lambda expression (#91). Defunct argument gather as_tsibble.mts() favour pivot_longer. yearweek() handles characters containing keywords “W”/“Wk”/“Week”, example yearweek(\"2019 W03\").","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-082","dir":"Changelog","previous_headings":"","what":"tsibble 0.8.2","title":"tsibble 0.8.2","text":"CRAN release: 2019-06-10 patch release. Fixed bugs losing “ordered” attribute renaming tsibble, introduced v0.8.1 (#126). Fixed bug .ts.tbl_ts() handling tsibble one row (#124). Fixed issue nest.tbl_ts() naming (#123). Fixed floating issues duplicated indices as_tsibble.ts() (#128).","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-081","dir":"Changelog","previous_headings":"","what":"tsibble 0.8.1","title":"tsibble 0.8.1","text":"CRAN release: 2019-06-03 Breaking change: index_by(.data, <empty>) default groups index variable rather previously ungroup(). Added new unnest_tsibble() minimise impact upcoming API changes tidyr::unnest(). index_by() allows grouping index variable; group_by() throw error grouping index. creating tsibble, warning might issued mismatch interval index representation. Fixed bugs semi_join.tbl_ts() anti_join.tbl_ts() without suffix (#122). Deprecate .tsibble() favour as_tsibble(). Defunct fill_na() favour fill_gaps(). Defunct pull_interval() favour interval_pull().","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-080","dir":"Changelog","previous_headings":"","what":"tsibble 0.8.0","title":"tsibble 0.8.0","text":"CRAN release: 2019-04-28","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"breaking-changes-0-8-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tsibble 0.8.0","text":"release undergone overhaul clean tsibble’s meta data: (1) attribute regular integrated interval, (2) attribute ordered integrated index. previously stored tsibble object may receive warning “corrupt tsibble object”. dplyr tidyr generics longer re-exported. Instead registered load, means need explicitly load library(tidyverse) front.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"defunct--deprecated-functionsarguments-0-8-0","dir":"Changelog","previous_headings":"","what":"Defunct & deprecated functions/arguments","title":"tsibble 0.8.0","text":"Deprecate id() creating key consistence tidy selectors, defunct v0.9.0. Deprecate pull_interval() favour interval_pull(). Deprecate .tsibble() favour as_tsibble(). warning displayed per session. Deprecate gather = TRUE as_tsibble.ts() favour pivot_longer = TRUE. Continue deprecation fill_na() favour fill_gaps(), defunct next release.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"improvements-0-8-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"tsibble 0.8.0","text":"Support interval “quarter”, “month”, “week” & “day” difftime. Support interval “millisecond” & “microsecond” hms. Added new argument .drop dropping empty factor as_tsibble() build_tsibble(). Binary - operator yearweek, yearmonth, yearquarter returns class difftime. Added new argument key_data build_tsibble() easy--reason purpose. yearquarter() better supports strings contains “Q”/“Qtr”/“Quarter”. (#107)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-8-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.8.0","text":"Fixed bugs as_tsibble.ts() monthly series starting months January. (#89) guess_frequency.yearweek() returns 52.18 accurate weekly representation, instead 52. n() now can called slice.tbl_ts(). (#95) Fixed false warnings negative indices slice.tbl_ts(). Fixed false warnings cases arrange.tbl_ts(). Fixed *_join() finding key index specified. (#102) Added “Tasmania” data(tourism) 2017 data. robustly handles sub-second intervals.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-070","dir":"Changelog","previous_headings":"","what":"tsibble 0.7.0","title":"tsibble 0.7.0","text":"CRAN release: 2019-02-18","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"breaking-changes-0-7-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tsibble 0.7.0","text":"Following changes dplyr v0.8.0 grouped data frames, tsibble allows empty key values disregards lazily stored key. operations now recalculate keying structure. Grouped tsibble (grouped_ts) subclassing grouped_df. argument .size retired stretch() favour .step. stretch() gained new .fill = NA argument, returns length input. restore previous behaviour, please use .fill = NULL. (#88)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-features-0-7-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tsibble 0.7.0","text":"slide_tsibble(), tile_tsibble(), stretch_tsibble() provide fast shorthand subsetting tsibble rolling rows. slide() gained new .step argument calculating every specified step instead every single step. update_tsibble() update key index bit easier.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-7-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.7.0","text":"Fixed rbind() dropping custom index class. (#78) Fixed count_gaps() dropping custom index class. count_gaps() now summarises keys gaps instead keys. Fixed guess_frequency.yearweek() returning Inf. (@jeffzi, #84) Fixed incorrect interval computation fractional doubles. appropriately handles sub-second intervals. grouped tsibble, fill_gaps() returns grouped tsibble .","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"defunct--deprecated-functions-0-7-0","dir":"Changelog","previous_headings":"","what":"Defunct & deprecated functions","title":"tsibble 0.7.0","text":"Defunct find_duplicates(). Deprecated fill_na() favour fill_gaps(). Defunct argument .drop column-wise dplyr verbs. Defunct key_by() (idea ’s ).","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-062","dir":"Changelog","previous_headings":"","what":"tsibble 0.6.2","title":"tsibble 0.6.2","text":"CRAN release: 2018-12-12","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-features-0-6-2","dir":"Changelog","previous_headings":"","what":"New features","title":"tsibble 0.6.2","text":"scan_gaps() joins family implicit missing values handlers. rolling window family gains parallel processing capabilities, prefixed future_. requires furrr package installed. (#66)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-6-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.6.2","text":"Regression bug (since tsibble v0.6.0) subsetting tsibble using [.tbl_ts. (#76) Issue warning system time zone “Europe/London” time_in() filter_index().","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"misc-0-6-2","dir":"Changelog","previous_headings":"","what":"Misc","title":"tsibble 0.6.2","text":"Defunct split_by() case_na(). Deprecated find_duplicates(). Continue soft-deprecation fill_na().","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-061","dir":"Changelog","previous_headings":"","what":"tsibble 0.6.1","title":"tsibble 0.6.1","text":"CRAN release: 2018-12-05 Fixed check errors Fedora. .data complete tsibble, fill_gaps() gives warning instead error name-value pairs supplied. filter_index() works grouped tsibble.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-060","dir":"Changelog","previous_headings":"","what":"tsibble 0.6.0","title":"tsibble 0.6.0","text":"CRAN release: 2018-11-27 release simplifies “key” structure. nesting crossing definition removed “key” specification. One variables forming “key”, required identify observational units time, longer assume relationship variables. nesting crossing structure dealt visualisation forecasting reconciliation downstream packages.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"breaking-changes-0-6-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tsibble 0.6.0","text":"count_gaps.tbl_ts() returns tibble containing gaps key value rather overall gap, consistent rest tsibble methods. output column names supplied users gain prefixed “.”. time_unit() accepts interval input instead time vectors avoid overheads, also marked internal function. Separate partial sliding slider() pslider() new functions partial_slider() partial_pslider(). Argument .partial removed slider() pslider() feature simpler interface. Removed argument group build_tsibble(). order construct grouped tsibble, x requires grouped df.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-features-0-6-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tsibble 0.6.0","text":"Added S3 generic has_gaps() quickly check implicit time gaps key tsibble. Added S3 generic new_data() produce future tsibble. shorthand filter_index() filter time window tsibble. New S3 generic time_in() check time falls ranges compact expression, need time zone specification. empty tsibble now valid raise error, makes easier programme . New vignettes handling implicit missingness FAQ. new_tsibble() creates subclass tsibble. Renamed fill_na() fill_gaps(), expressive function name consistency has_gaps() count_gaps(). Soft-deprecated fill_na(). (#71) Added is_duplicated(), are_duplicated() duplicates(). POSIXct, time zone displayed header via print(). Added index support ordered factors.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-6-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.6.0","text":"Fixed unexpected error message holiday_aus() requires package “timeDate”. Fixed summarise.tbl_ts(), select.tbl_ts() & fill_na.tbl_ts() scoping issue (#67). slice.tbl_ts() correctly handles logical NA. fill_na() replace implicit time gaps values functions, leave originally explicit NA intact. tidyr::fill() gained support class “grouped_ts”, re-exported . (#73)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"misc-0-6-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"tsibble 0.6.0","text":"Soft-deprecated fill_na(), favour fill_gaps(). Soft-deprecated find_duplicates(), favour are_duplicated(). Deprecated case_na(), defunct next release. Deprecated split_by(), development S3 generic dplyr. Soft-deprecated .tsibble(), following .tibble() tibble. Deprecated .drop argument column-wise verbs, suggested use as_tibble(). select() doesn’t select index, inform users automatically select .","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-053","dir":"Changelog","previous_headings":"","what":"tsibble 0.5.3","title":"tsibble 0.5.3","text":"CRAN release: 2018-10-10","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-features-0-5-3","dir":"Changelog","previous_headings":"","what":"New features","title":"tsibble 0.5.3","text":"Added append_row() easily appending new observations tsibble. (#59) Nesting structure can specified using /, consistent lm. (#64)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-5-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.5.3","text":"Fixed warning fill_na() multiple replacements using group_by(), introduced v0.5.1. as_tsibble.grouped_df() respected existing groups removed argument group. (#60) Preserve ordering key specification select.tbl_ts(). (#63)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"misc-0-5-3","dir":"Changelog","previous_headings":"","what":"Misc","title":"tsibble 0.5.3","text":"Soft-deprecated case_na() & split_by().","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-052","dir":"Changelog","previous_headings":"","what":"tsibble 0.5.2","title":"tsibble 0.5.2","text":"CRAN release: 2018-09-11","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-5-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.5.2","text":"unnest.lst_ts respects ordering “key” values. (#56) split_by() nest.tbl_ts() respect appearance ordering input variables. (#57) group_indices.tbl_ts() key_indices() return consistent formats generic. Argument key longer accepted character.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"improvements-0-5-2","dir":"Changelog","previous_headings":"","what":"Improvements","title":"tsibble 0.5.2","text":"Slightly faster nest.tbl_ts(). index_by() gives informative error LHS named index.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"changes-catering-for-the-updates-in-tibble-0-5-2","dir":"Changelog","previous_headings":"","what":"Changes catering for the updates in tibble","title":"tsibble 0.5.2","text":"longer reexported .tibble(). Reexported tibble().","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-051","dir":"Changelog","previous_headings":"","what":"tsibble 0.5.1","title":"tsibble 0.5.1","text":"CRAN release: 2018-08-20","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-features-0-5-1","dir":"Changelog","previous_headings":"","what":"New features","title":"tsibble 0.5.1","text":"tile() gained new argument .bind = FALSE. Vectorised arithmetic operators (+ & -) yearweek, yearmonth, yearquarter. new_interval() creates “interval” object specified values.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"improvements-0-5-1","dir":"Changelog","previous_headings":"","what":"Improvements","title":"tsibble 0.5.1","text":"Faster performance fill_na() replacing values group_by(). Speed improvement subsetting yearweek, yearmonth yearquarter using [.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-5-1","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.5.1","text":"Fixed key updating via group_by() + summarise(). (#47) Respected ordering input variables creating key. Fixed “attempt select less one element integerOneIndex” error message unnest.lst_ts(). Fixed incorrect interval join operations custom index class. (#52) Avoided warnings character input key value gather.tbl_ts(). (#54)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"misc-0-5-1","dir":"Changelog","previous_headings":"","what":"Misc","title":"tsibble 0.5.1","text":"slide() & stretch() use coercion rules dplyr::combine() now, .bind = TRUE. Avoid strong dependency pillar. Setting row names tsibble deprecated, consistent tibble.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-050","dir":"Changelog","previous_headings":"","what":"tsibble 0.5.0","title":"tsibble 0.5.0","text":"CRAN release: 2018-08-05 release introduced breaking changes “interval” class make tsibble better support finer time resolution (e.g. millisecond, microsecond, nanosecond). “interval” format changes upper case short hand. support new time index class, index_valid() pull_interval() need defined now.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-features-0-5-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tsibble 0.5.0","text":"Added “nanotime” support nanoseconds. Added scoped variant group_by_key() easily group key variables. slide() gained new argument .align = \"right\" align “right”, “center”, “left”. window size even center alignment, either “center-right” “center-left” needed. Defined arithmetic operators (+ & -) yearweek, yearmonth, yearquarter. slide() stretch() gained new argument .bind = FALSE. new vignette window functions.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"improvements-0-5-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"tsibble 0.5.0","text":"Speed improvement internals ’s known valid tsibble. (#43) Better support “millisecond” “microsecond”.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"internal-changes-0-5-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"tsibble 0.5.0","text":"Replaced NA NULL 0 “interval” class make representation simpler. interval class new slots “millisecond”, “microsecond”, “nanosecond”. time_unit() function instead S3 generic, made index extension bit easier.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-5-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.5.0","text":"Fixed warning format.yearweek(). Fixed group_by.lst_ts() dropping grouping information. Fixed stretch2() applying .f one input. Fixed NSE as_tsibble.grouped_df() groups. (#44) Fixed bug .fill = NULL slide().","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"misc-0-5-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"tsibble 0.5.0","text":"Moved package “timeDate” Imports Suggests. Added “anytime” Imports better parsing characters.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-040","dir":"Changelog","previous_headings":"","what":"tsibble 0.4.0","title":"tsibble 0.4.0","text":"CRAN release: 2018-07-06","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"breaking-changes-0-4-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tsibble 0.4.0","text":"slide(), tile(), stretch() return lists instead numerics . added slide2(), pslide() map multiple inputs simultaneously. added type-stable variants slide_dbl(), slide_int(), slide_chr(), slide_lgl(). negative window size results backward moving direction. slide() gained new argument .partial support partial sliding. Renamed x .x slider(), tiler(), stretcher(). pslider(), ptiler(), pstretcher() support multiple inputs now, split parallel.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-features-0-4-0","dir":"Changelog","previous_headings":"","what":"New features","title":"tsibble 0.4.0","text":"New holiday_aus() Australian national state-based public holiday. Defined diff() year-week, year-month, year-quarter. yearweek(), yearmonth(), yearquarter() supported character. Added slide2(), pslide(), tile2(), ptile(), stretch2(), pstretch() slide multiple inputs simultaneously (#33). New S3 generics units_since() index classes. New is_53weeks() determine year 53 ISO weeks. New S3 generics key_sum() extending tsibble.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"improvements-0-4-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"tsibble 0.4.0","text":"as_tsibble.ts() removed tsp attribute value column. Dropped “lst_col” attribute lst_ts (#25). informative error message data frame passed tsibble(). informative error message fill_na() count_gaps tsibble unknown interval. as_tsibble.tbl_ts() & as_tsibble.grouped_ts() now return self (#34). id() used tsibble context (e.g. as_tsibble(), tsibble(), build_tsibble()) regardless conflicts dplyr plyr, avoid frustrating message (#36). select.tbl_ts() now preserved index.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-4-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.4.0","text":"Fixed bug .ts.tbl_ts() ignoring value argument key empty. Fixed bug [.tbl_ts() subsetting columns characters (#30). Fixed bug fill_na.tbl_ts() dropping custom index class (#32). Fixed bug format.yearweek() due boundary issue (#27). column passed index contains NA, abort.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"misc-0-4-0","dir":"Changelog","previous_headings":"","what":"Misc","title":"tsibble 0.4.0","text":"Suggested nycflights13 >= 1.0.0.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-030","dir":"Changelog","previous_headings":"","what":"tsibble 0.3.0","title":"tsibble 0.3.0","text":"CRAN release: 2018-05-29 tsibble package hexagon logo now! Thanks Mitch (@mitchelloharawild).","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-functions-0-3-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"tsibble 0.3.0","text":"New difference() computes lagged differences numeric vector. returns vector length input NA padded. works mutate(). Added support gather()/spread(), nest()/unnest() tbl_ts.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"defunct-0-3-0","dir":"Changelog","previous_headings":"","what":"Defunct","title":"tsibble 0.3.0","text":"retired tsummarise().","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"internal-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"tsibble 0.3.0","text":"index2 deviates index (using index_by()), index2 part grouping variables.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-020","dir":"Changelog","previous_headings":"","what":"tsibble 0.2.0","title":"tsibble 0.2.0","text":"CRAN release: 2018-05-11 release (hopefully) marks stability tsibble data object (tbl_ts). tbl_ts contains following components: key: single multiple columns uniquely identify observational units time. key consisting nested crossed variables reflects structure underlying data. programme takes care updates “key” manipulating data. “key” differs grouping variables respect variables manipulated users. index: variable represents time. together “key” uniquely identifies observation data table. index2: need second index? means re-indexing variable, second index. identical index time, start deviating using index_by(). index_by() works similarly group_by(), groups index . dplyr verbs, like filter(), mutate(), operates time group data defined index_by(). may wonder introducing new function rather using group_by() users familiar . ’s time indispensable tsibble, index_by() provides trace understanding index changes. purpose, group_by() just general. example, index_by() + summarise() aggregates data less granular time period, leading update index, nicely intuitively handled now. interval: interval class save list time intervals. computes greatest common factor time difference index column, give sensible interval almost cases, compared minimal time distance. also depends time representation. example, data monthly, index suggested use yearmonth() format instead Date, Date gives number days number months. regular: since tsibble factors implicit missing cases, whether data regular determined. relies user’s specification. ordered: time-wise rolling window functions assume data temporal ordering. tsibble sorted time index. key explicitly declared, key sorted first followed arranging time ascending order. ’s time order, broadcasts warning.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"breaking-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Breaking changes","title":"tsibble 0.2.0","text":"Deprecated tsummarise() scoped variants. can replaced combo index_by() + summarise() (#20). tsummarise() provides unintuitive interface first argument keeps size index, remaining arguments reduces rows single one. Analogously, group_by() summarise(). proposed index_by() solves issue index update. Renamed inform_duplicates() (defunct) find_duplicates() better reflect functionality. key_vars() group_vars() return vector characters instead list. distinct.tbl_ts() now returns tibble instead error. longer reexported dplyr::() tidyr::fill(), respect input structure. Defunct index_sum(), replaced index_valid() extend index type support.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-functions-0-2-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"tsibble 0.2.0","text":"index_by() groups time index, counterpart group_by() temporal context. new S3 generic count_gaps() gaps() counts time gaps (implicit missing observations time). yearweek() creates coerces year-week object. (#17)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"api-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"API changes","title":"tsibble 0.2.0","text":"fill_na.tbl_ts() gained new argument .full = FALSE. .full = FALSE (default) inserts NA key within time period, TRUE entire time span. affects results fill_na.tbl_ts() took TRUE account previously. (#15) Renamed drop argument .drop column-wise dplyr verbs. Dropped duplicated argument pull_interval(). group_by.tbl_ts() behaves exactly group_by.tbl_df now. Grouping variables temporary data manipulation. Nested crossed variables type group_by() thinks.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"improvements-0-2-0","dir":"Changelog","previous_headings":"","what":"Improvements","title":"tsibble 0.2.0","text":"Added overall time span glimpse.tbl_ts(). Slightly improved speed fill_na().","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.2.0","text":"Fixed transmute.tbl_ts() univariate time series due unregistered tidyselect helpers. (#9). Fixed bug select.tbl_ts() rename.tbl_ts() preserving grouped variables (#12). Fixed bug select.tbl_ts() rename.tbl_ts() renaming grouped variables.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"internal-changes-0-2-0","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"tsibble 0.2.0","text":"tbl_ts gains new attribute index2, candidate new index (symbol) used index_by(). time interval obtained greatest common factor positive time differences. covers broader cases minimal value. attr(grouped_ts, \"vars\") stores characters instead names, attr(grouped_df, \"vars\").","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-015","dir":"Changelog","previous_headings":"","what":"tsibble 0.1.5","title":"tsibble 0.1.5","text":"CRAN release: 2018-04-01 release introduces major changes underlying tbl_ts object: Dropped attribute “key_indices” tbl_ts class reduce object size, computed fly printing. Gained new attribute “ordered” identify arranged key index ascending order. , broadcast warning. warning likely occurs arrange() slice() functions. “index” attribute tbl_ts object symbol now instead quosure. “key” attribute tbl_ts object unnamed list symbols.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-functions-0-1-5","dir":"Changelog","previous_headings":"","what":"New functions","title":"tsibble 0.1.5","text":"key_update() change/update keys given tsibble. unkey() S3 method tsibble key size < 2. key_indices() S3 method extract key indices. split_by() split tsibble list data unquoted variables. build_tsibble() allows users gain control tsibble construction. Added as_tsibble.msts() multiple seasonality time series defined forecast package.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-1-5","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.1.5","text":"Fixed as_tsibble.ts() daily time series (frequency = 7). group_by.tbl_ts() accept named expressions.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"internal-changes-0-1-5","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"tsibble 0.1.5","text":"longer throw error grouping index. interval regularly spaced tsibble (re)computed creating tsibble performing row-wise operations (like filter() slice()). avoids unnecessary re-computation many function calls.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-013","dir":"Changelog","previous_headings":"","what":"tsibble 0.1.3","title":"tsibble 0.1.3","text":"CRAN release: 2018-02-20","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-functions-0-1-3","dir":"Changelog","previous_headings":"","what":"New functions","title":"tsibble 0.1.3","text":"Added scoped variants tsummarise() including tsummarise_all(), tsummarise_if(), tsummarise_at().","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"api-changes-0-1-3","dir":"Changelog","previous_headings":"","what":"API changes","title":"tsibble 0.1.3","text":"windowed functions, including slide(), tile(), stretch(), longer defined S3 methods. Several new variants introduced purpose type stability, like slide_lst() (list), slide_dfr() (row-binding data frame), slide_dfc() (column-binding data frame). index variable must sit first name-value pair tsummarise() instead position call. transmute.tbl_ts() keeps newly created variables along index keys, instead throwing error . Depends purrr (>= 0.2.3)","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-1-3","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.1.3","text":"Fixed error message glimpse.tbl_ts() Fixed format.key() nesting crossed another nesting.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-012","dir":"Changelog","previous_headings":"","what":"tsibble 0.1.2","title":"tsibble 0.1.2","text":"CRAN release: 2018-01-27 release marks complete support dplyr key verbs.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"reexported-functions-0-1-2","dir":"Changelog","previous_headings":"","what":"Reexported functions","title":"tsibble 0.1.2","text":"tidyr::fill() fills NA backward forward tsibble. Implement tbl_ts support dplyr::*_join(). tbl_ts support dplyr::transmute() dplyr::distinct() return error.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"new-functions-0-1-2","dir":"Changelog","previous_headings":"","what":"New functions","title":"tsibble 0.1.2","text":"inform_duplicates() informs row duplicated elements key index variables.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"bug-fixes-0-1-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"tsibble 0.1.2","text":"Fix bug summarise.tbl_ts() tsummarise.tbl_ts(), calling functions parameters like dplyr::n(). summarise.tbl_ts() tsummarise.tbl_ts(), one grouping level dropped consistency dplyr::summarise() grouped tbl_ts. Fix incorrect group key indices. NULL tbl_ts supported as_tsibble(). empty tsibble allowed. group_by.tbl_ts(.data, ..., add = TRUE) works expected now.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"internal-changes-0-1-2","dir":"Changelog","previous_headings":"","what":"Internal changes","title":"tsibble 0.1.2","text":"Better handling grouped_ts grouped_df. informative error messages.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-010","dir":"Changelog","previous_headings":"","what":"tsibble 0.1.0","title":"tsibble 0.1.0","text":"CRAN release: 2018-01-09 Initial release CRAN.","code":""},{"path":"https://tsibble.tidyverts.org/news/index.html","id":"tsibble-001","dir":"Changelog","previous_headings":"","what":"tsibble 0.0.1","title":"tsibble 0.0.1","text":"Added NEWS.md file track changes package. Pre-release Github","code":""}]
